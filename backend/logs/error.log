{
  service: 'forma-backend',
  error: {
    message: 'Route /favicon.ico not found',
    stack: 'Error: Route /favicon.ico not found\n' +
      '    at notFoundHandler (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/middleware/notFoundHandler.ts:5:17)\n' +
      '    at Layer.handle [as handle_request] (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/layer.js:95:5)\n' +
      '    at trim_prefix (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:328:13)\n' +
      '    at /Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:286:9\n' +
      '    at Function.process_params (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:346:12)\n' +
      '    at next (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:280:10)\n' +
      '    at urlencodedParser (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/body-parser@1.20.3/node_modules/body-parser/lib/types/urlencoded.js:94:7)\n' +
      '    at Layer.handle [as handle_request] (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/layer.js:95:5)\n' +
      '    at trim_prefix (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:328:13)\n' +
      '    at /Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:286:9',
    statusCode: 404
  },
  request: {
    method: 'GET',
    url: '/favicon.ico',
    headers: {
      host: 'localhost:3001',
      connection: 'keep-alive',
      'sec-ch-ua-platform': '"macOS"',
      'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36',
      'sec-ch-ua': '"Chromium";v="140", "Not=A?Brand";v="24", "Google Chrome";v="140"',
      'sec-ch-ua-mobile': '?0',
      accept: 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8',
      'sec-fetch-site': 'same-origin',
      'sec-fetch-mode': 'no-cors',
      'sec-fetch-dest': 'image',
      'accept-encoding': 'gzip, deflate, br, zstd',
      'accept-language': 'en-US,en;q=0.9',
      cookie: '__next_hmr_refresh_hash__=224'
    },
    body: {}
  },
  level: 'error',
  message: 'Error occurred:',
  timestamp: '2025-09-27 18:30:15'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'CedarOS API Response Error:',
  timestamp: '2025-09-27 18:32:07'
}
{
  service: 'forma-backend',
  code: 'ECONNREFUSED',
  errors: [
    Error: connect ECONNREFUSED ::1:8080
        at createConnectionError (node:net:1652:14)
        at afterConnectMultiple (node:net:1682:16) {
      errno: -61,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '::1',
      port: 8080
    },
    Error: connect ECONNREFUSED 127.0.0.1:8080
        at createConnectionError (node:net:1652:14)
        at afterConnectMultiple (node:net:1682:16) {
      errno: -61,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 8080
    }
  ],
  message: 'Failed to analyze pose for session test-session-123: Error',
  name: 'AggregateError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 10000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: 'Bearer your_cedaros_api_key_here',
      'User-Agent': 'axios/1.12.2',
      'Content-Length': '214',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    baseURL: 'http://localhost:8080',
    method: 'post',
    url: '/analyze',
    data: '{"sessionId":"test-session-123","landmarks":[{"x":0.5,"y":0.3,"z":0.1,"visibility":0.9},{"x":0.4,"y":0.4,"z":0.1,"visibility":0.8},{"x":0.6,"y":0.4,"z":0.1,"visibility":0.8}],"timestamp":"2025-09-27T22:32:07.502Z"}',
    allowAbsoluteUrls: true
  },
  request: <ref *2> Writable {
    _events: {
      close: undefined,
      error: [Function: handleRequestError],
      prefinish: undefined,
      finish: undefined,
      drain: undefined,
      response: [Function: handleResponse],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ],
      timeout: undefined,
      abort: undefined
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 17580812,
      [Symbol(kBufferedValue)]: null
    },
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: 'http:',
      path: '/analyze',
      method: 'POST',
      headers: [Object: null prototype] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Bearer your_cedaros_api_key_here',
        'User-Agent': 'axios/1.12.2',
        'Content-Length': '214',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      agents: { http: undefined, https: undefined },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: { proxy: [Function: beforeRedirect] },
      hostname: 'localhost',
      port: '8080',
      agent: undefined,
      nativeProtocols: {
        'http:': {
          _connectionListener: [Function: connectionListener],
          METHODS: [
            'ACL',        'BIND',        'CHECKOUT',
            'CONNECT',    'COPY',        'DELETE',
            'GET',        'HEAD',        'LINK',
            'LOCK',       'M-SEARCH',    'MERGE',
            'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
            'MOVE',       'NOTIFY',      'OPTIONS',
            'PATCH',      'POST',        'PROPFIND',
            'PROPPATCH',  'PURGE',       'PUT',
            'QUERY',      'REBIND',      'REPORT',
            'SEARCH',     'SOURCE',      'SUBSCRIBE',
            'TRACE',      'UNBIND',      'UNLINK',
            'UNLOCK',     'UNSUBSCRIBE'
          ],
          STATUS_CODES: {
            '100': 'Continue',
            '101': 'Switching Protocols',
            '102': 'Processing',
            '103': 'Early Hints',
            '200': 'OK',
            '201': 'Created',
            '202': 'Accepted',
            '203': 'Non-Authoritative Information',
            '204': 'No Content',
            '205': 'Reset Content',
            '206': 'Partial Content',
            '207': 'Multi-Status',
            '208': 'Already Reported',
            '226': 'IM Used',
            '300': 'Multiple Choices',
            '301': 'Moved Permanently',
            '302': 'Found',
            '303': 'See Other',
            '304': 'Not Modified',
            '305': 'Use Proxy',
            '307': 'Temporary Redirect',
            '308': 'Permanent Redirect',
            '400': 'Bad Request',
            '401': 'Unauthorized',
            '402': 'Payment Required',
            '403': 'Forbidden',
            '404': 'Not Found',
            '405': 'Method Not Allowed',
            '406': 'Not Acceptable',
            '407': 'Proxy Authentication Required',
            '408': 'Request Timeout',
            '409': 'Conflict',
            '410': 'Gone',
            '411': 'Length Required',
            '412': 'Precondition Failed',
            '413': 'Payload Too Large',
            '414': 'URI Too Long',
            '415': 'Unsupported Media Type',
            '416': 'Range Not Satisfiable',
            '417': 'Expectation Failed',
            '418': "I'm a Teapot",
            '421': 'Misdirected Request',
            '422': 'Unprocessable Entity',
            '423': 'Locked',
            '424': 'Failed Dependency',
            '425': 'Too Early',
            '426': 'Upgrade Required',
            '428': 'Precondition Required',
            '429': 'Too Many Requests',
            '431': 'Request Header Fields Too Large',
            '451': 'Unavailable For Legal Reasons',
            '500': 'Internal Server Error',
            '501': 'Not Implemented',
            '502': 'Bad Gateway',
            '503': 'Service Unavailable',
            '504': 'Gateway Timeout',
            '505': 'HTTP Version Not Supported',
            '506': 'Variant Also Negotiates',
            '507': 'Insufficient Storage',
            '508': 'Loop Detected',
            '509': 'Bandwidth Limit Exceeded',
            '510': 'Not Extended',
            '511': 'Network Authentication Required'
          },
          Agent: [Function: Agent] { defaultMaxSockets: Infinity },
          ClientRequest: [Function: ClientRequest],
          IncomingMessage: [Function: IncomingMessage],
          OutgoingMessage: [Function: OutgoingMessage],
          Server: [Function: Server],
          ServerResponse: [Function: ServerResponse],
          createServer: [Function: createServer],
          validateHeaderName: [Function: wrappedFn] {
            withoutStackTrace: [Function (anonymous)]
          },
          validateHeaderValue: [Function: wrappedFn] {
            withoutStackTrace: [Function (anonymous)]
          },
          get: [Function: get],
          request: [Function: request],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          maxHeaderSize: [Getter],
          globalAgent: [Getter/Setter]
        },
        'https:': {
          Agent: [Function: Agent],
          globalAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: true,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(shapeMode)]: false,
            [Symbol(kCapture)]: false
          },
          Server: [Function: Server],
          createServer: [Function: createServer],
          get: [Function: get],
          request: [Function: request]
        }
      },
      pathname: '/analyze'
    },
    _ended: false,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 214,
    _requestBodyBuffers: [
      {
        data: <Buffer 7b 22 73 65 73 73 69 6f 6e 49 64 22 3a 22 74 65 73 74 2d 73 65 73 73 69 6f 6e 2d 31 32 33 22 2c 22 6c 61 6e 64 6d 61 72 6b 73 22 3a 5b 7b 22 78 22 3a ... 164 more bytes>,
        encoding: undefined
      }
    ],
    _eventsCount: 3,
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        response: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 214,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: true,
      _closed: false,
      socket: Socket {
        connecting: false,
        _hadError: true,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: {
          close: [
            [Function: onClose],
            [Function: socketCloseListener],
            [Function: bound onceWrapper] {
              listener: [Function: onClose]
            }
          ],
          error: [Function: socketErrorListener],
          prefinish: undefined,
          finish: undefined,
          drain: [Function: ondrain],
          data: undefined,
          end: [Function: onReadableStreamEnd],
          readable: undefined,
          connect: [
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: bound onceWrapper] {
              listener: [Function: connect]
            },
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            }
          ],
          free: [Function: onFree],
          timeout: [
            [Function: onTimeout],
            [Function: bound onceWrapper] {
              listener: [Function: emitRequestTimeout]
            },
            [Function (anonymous)]
          ],
          agentRemove: [Function: onRemove]
        },
        _readableState: ReadableState {
          highWaterMark: 16384,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          [Symbol(kState)]: 59777526,
          [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
              at internalConnectMultiple (node:net:1122:18)
              at afterConnectMultiple (node:net:1689:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:8080
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 8080
              },
              Error: connect ECONNREFUSED 127.0.0.1:8080
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 8080
              }
            ]
          }
        },
        _writableState: WritableState {
          highWaterMark: 16384,
          length: 503,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 503,
          bufferedIndex: 0,
          pendingcb: 1,
          [Symbol(kState)]: 118260214,
          [Symbol(kBufferedValue)]: null,
          [Symbol(kWriteCbValue)]: [Function (anonymous)],
          [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
              at internalConnectMultiple (node:net:1122:18)
              at afterConnectMultiple (node:net:1689:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:8080
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 8080
              },
              Error: connect ECONNREFUSED 127.0.0.1:8080
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 8080
              }
            ]
          }
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 8,
        _sockname: null,
        _pendingData: [
          {
            chunk: 'POST /analyze HTTP/1.1\r\n' +
              'Accept: application/json, text/plain, */*\r\n' +
              'Content-Type: application/json\r\n' +
              'Authorization: Bearer your_cedaros_api_key_here\r\n' +
              'User-Agent: axios/1.12.2\r\n' +
              'Content-Length: 214\r\n' +
              'Accept-Encoding: gzip, compress, deflate, br\r\n' +
              'Host: localhost:8080\r\n' +
              'Connection: keep-alive\r\n' +
              '\r\n',
            encoding: 'latin1',
            callback: [Function: nop]
          },
          {
            chunk: <Buffer 7b 22 73 65 73 73 69 6f 6e 49 64 22 3a 22 74 65 73 74 2d 73 65 73 73 69 6f 6e 2d 31 32 33 22 2c 22 6c 61 6e 64 6d 61 72 6b 73 22 3a 5b 7b 22 78 22 3a ... 164 more bytes>,
            encoding: 'buffer',
            callback: [Function (anonymous)]
          },
          allBuffers: false
        ],
        _pendingEncoding: '',
        server: null,
        _server: null,
        timeout: 10000,
        parser: null,
        _httpMessage: [Circular *1],
        autoSelectFamilyAttemptedAddresses: [ '::1:8080', '127.0.0.1:8080' ],
        [Symbol(async_id_symbol)]: 303,
        [Symbol(kHandle)]: null,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: -1,
          _idlePrev: null,
          _idleNext: null,
          _idleStart: 24133,
          _onTimeout: null,
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: true,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 300,
          [Symbol(triggerId)]: 295
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'POST /analyze HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Bearer your_cedaros_api_key_here\r\n' +
        'User-Agent: axios/1.12.2\r\n' +
        'Content-Length: 214\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:8080\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] {
          keepAlive: true,
          scheduling: 'lifo',
          timeout: 5000,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'localhost:8080:': [
            Socket {
              connecting: false,
              _hadError: true,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _events: {
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener],
                  [Function: bound onceWrapper] {
                    listener: [Function: onClose]
                  }
                ],
                error: [Function: socketErrorListener],
                prefinish: undefined,
                finish: undefined,
                drain: [Function: ondrain],
                data: undefined,
                end: [Function: onReadableStreamEnd],
                readable: undefined,
                connect: [
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function: connect]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                ],
                free: [Function: onFree],
                timeout: [
                  [Function: onTimeout],
                  [Function: bound onceWrapper] {
                    listener: [Function: emitRequestTimeout]
                  },
                  [Function (anonymous)]
                ],
                agentRemove: [Function: onRemove]
              },
              _readableState: ReadableState {
                highWaterMark: 16384,
                buffer: [],
                bufferIndex: 0,
                length: 0,
                pipes: [],
                awaitDrainWriters: null,
                [Symbol(kState)]: 59777526,
                [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
                    at internalConnectMultiple (node:net:1122:18)
                    at afterConnectMultiple (node:net:1689:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:8080
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 8080
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:8080
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 8080
                    }
                  ]
                }
              },
              _writableState: WritableState {
                highWaterMark: 16384,
                length: 503,
                corked: 0,
                onwrite: [Function: bound onwrite],
                writelen: 503,
                bufferedIndex: 0,
                pendingcb: 1,
                [Symbol(kState)]: 118260214,
                [Symbol(kBufferedValue)]: null,
                [Symbol(kWriteCbValue)]: [Function (anonymous)],
                [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
                    at internalConnectMultiple (node:net:1122:18)
                    at afterConnectMultiple (node:net:1689:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:8080
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 8080
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:8080
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 8080
                    }
                  ]
                }
              },
              allowHalfOpen: false,
              _maxListeners: undefined,
              _eventsCount: 8,
              _sockname: null,
              _pendingData: [
                {
                  chunk: 'POST /analyze HTTP/1.1\r\n' +
                    'Accept: application/json, text/plain, */*\r\n' +
                    'Content-Type: application/json\r\n' +
                    'Authorization: Bearer your_cedaros_api_key_here\r\n' +
                    'User-Agent: axios/1.12.2\r\n' +
                    'Content-Length: 214\r\n' +
                    'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                    'Host: localhost:8080\r\n' +
                    'Connection: keep-alive\r\n' +
                    '\r\n',
                  encoding: 'latin1',
                  callback: [Function: nop]
                },
                {
                  chunk: <Buffer 7b 22 73 65 73 73 69 6f 6e 49 64 22 3a 22 74 65 73 74 2d 73 65 73 73 69 6f 6e 2d 31 32 33 22 2c 22 6c 61 6e 64 6d 61 72 6b 73 22 3a 5b 7b 22 78 22 3a ... 164 more bytes>,
                  encoding: 'buffer',
                  callback: [Function (anonymous)]
                },
                allBuffers: false
              ],
              _pendingEncoding: '',
              server: null,
              _server: null,
              timeout: 10000,
              parser: null,
              _httpMessage: [Circular *1],
              autoSelectFamilyAttemptedAddresses: [ '::1:8080', '127.0.0.1:8080' ],
              [Symbol(async_id_symbol)]: 303,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: Timeout {
                _idleTimeout: -1,
                _idlePrev: null,
                _idleNext: null,
                _idleStart: 24133,
                _onTimeout: null,
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: true,
                [Symbol(refed)]: false,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 300,
                [Symbol(triggerId)]: 295
              },
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(shapeMode)]: true,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: true,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/analyze',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: [Function: emitRequestTimeout],
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Circular *2],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [ 'Authorization', 'Bearer your_cedaros_api_key_here' ],
        'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
        'content-length': [ 'Content-Length', '214' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:8080' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _currentUrl: 'http://localhost:8080/analyze',
    _timeout: null,
    [Symbol(shapeMode)]: true,
    [Symbol(kCapture)]: false
  },
  level: 'error',
  stack: 'AggregateError: Error\n' +
    '    at Function.AxiosError.from (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/AxiosError.js:96:14)\n' +
    '    at RedirectableRequest.handleRequestError (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/adapters/http.js:638:25)\n' +
    '    at RedirectableRequest.emit (node:events:536:35)\n' +
    '    at eventHandlers.<computed> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/follow-redirects@1.15.11/node_modules/follow-redirects/index.js:49:24)\n' +
    '    at ClientRequest.emit (node:events:524:28)\n' +
    '    at emitErrorEvent (node:_http_client:101:11)\n' +
    '    at Socket.socketErrorListener (node:_http_client:504:5)\n' +
    '    at Socket.emit (node:events:524:28)\n' +
    '    at emitErrorNT (node:internal/streams/destroy:169:8)\n' +
    '    at emitErrorCloseNT (node:internal/streams/destroy:128:3)\n' +
    '    at Axios.request (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/Axios.js:45:41)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async CedarOSService.analyzePose (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/services/cedaros.service.ts:155:24)\n' +
    '    at async <anonymous> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/routes/pose.ts:36:20)',
  cause: AggregateError [ECONNREFUSED]: 
      at internalConnectMultiple (node:net:1122:18)
      at afterConnectMultiple (node:net:1689:7) {
    code: 'ECONNREFUSED',
    [errors]: [
      Error: connect ECONNREFUSED ::1:8080
          at createConnectionError (node:net:1652:14)
          at afterConnectMultiple (node:net:1682:16) {
        errno: -61,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 8080
      },
      Error: connect ECONNREFUSED 127.0.0.1:8080
          at createConnectionError (node:net:1652:14)
          at afterConnectMultiple (node:net:1682:16) {
        errno: -61,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 8080
      }
    ]
  },
  timestamp: '2025-09-27 18:32:07'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'Mastra API Response Error:',
  timestamp: '2025-09-27 18:32:07'
}
{
  service: 'forma-backend',
  code: 'ECONNREFUSED',
  errors: [
    Error: connect ECONNREFUSED ::1:8081
        at createConnectionError (node:net:1652:14)
        at afterConnectMultiple (node:net:1682:16) {
      errno: -61,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '::1',
      port: 8081
    },
    Error: connect ECONNREFUSED 127.0.0.1:8081
        at createConnectionError (node:net:1652:14)
        at afterConnectMultiple (node:net:1682:16) {
      errno: -61,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 8081
    }
  ],
  message: 'Failed to analyze pose with Mastra: Error',
  name: 'AggregateError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 15000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: 'Bearer your_mastra_api_key_here',
      'User-Agent': 'axios/1.12.2',
      'Content-Length': '322',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    baseURL: 'http://localhost:8081',
    method: 'post',
    url: '/analyze/pose',
    data: '{"exercise":"squat","landmarks":[{"x":0.5,"y":0.3,"z":0.1,"visibility":0.9},{"x":0.4,"y":0.4,"z":0.1,"visibility":0.8},{"x":0.6,"y":0.4,"z":0.1,"visibility":0.8}],"formIssues":[],"currentPhase":"active","sessionContext":{"sessionId":"test-session-123","userId":"user_1759012314512"},"timestamp":"2025-09-27T22:32:07.535Z"}',
    allowAbsoluteUrls: true
  },
  request: <ref *2> Writable {
    _events: {
      close: undefined,
      error: [Function: handleRequestError],
      prefinish: undefined,
      finish: undefined,
      drain: undefined,
      response: [Function: handleResponse],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ],
      timeout: undefined,
      abort: undefined
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 17580812,
      [Symbol(kBufferedValue)]: null
    },
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: 'http:',
      path: '/analyze/pose',
      method: 'POST',
      headers: [Object: null prototype] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Bearer your_mastra_api_key_here',
        'User-Agent': 'axios/1.12.2',
        'Content-Length': '322',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      agents: { http: undefined, https: undefined },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: { proxy: [Function: beforeRedirect] },
      hostname: 'localhost',
      port: '8081',
      agent: undefined,
      nativeProtocols: {
        'http:': {
          _connectionListener: [Function: connectionListener],
          METHODS: [
            'ACL',        'BIND',        'CHECKOUT',
            'CONNECT',    'COPY',        'DELETE',
            'GET',        'HEAD',        'LINK',
            'LOCK',       'M-SEARCH',    'MERGE',
            'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
            'MOVE',       'NOTIFY',      'OPTIONS',
            'PATCH',      'POST',        'PROPFIND',
            'PROPPATCH',  'PURGE',       'PUT',
            'QUERY',      'REBIND',      'REPORT',
            'SEARCH',     'SOURCE',      'SUBSCRIBE',
            'TRACE',      'UNBIND',      'UNLINK',
            'UNLOCK',     'UNSUBSCRIBE'
          ],
          STATUS_CODES: {
            '100': 'Continue',
            '101': 'Switching Protocols',
            '102': 'Processing',
            '103': 'Early Hints',
            '200': 'OK',
            '201': 'Created',
            '202': 'Accepted',
            '203': 'Non-Authoritative Information',
            '204': 'No Content',
            '205': 'Reset Content',
            '206': 'Partial Content',
            '207': 'Multi-Status',
            '208': 'Already Reported',
            '226': 'IM Used',
            '300': 'Multiple Choices',
            '301': 'Moved Permanently',
            '302': 'Found',
            '303': 'See Other',
            '304': 'Not Modified',
            '305': 'Use Proxy',
            '307': 'Temporary Redirect',
            '308': 'Permanent Redirect',
            '400': 'Bad Request',
            '401': 'Unauthorized',
            '402': 'Payment Required',
            '403': 'Forbidden',
            '404': 'Not Found',
            '405': 'Method Not Allowed',
            '406': 'Not Acceptable',
            '407': 'Proxy Authentication Required',
            '408': 'Request Timeout',
            '409': 'Conflict',
            '410': 'Gone',
            '411': 'Length Required',
            '412': 'Precondition Failed',
            '413': 'Payload Too Large',
            '414': 'URI Too Long',
            '415': 'Unsupported Media Type',
            '416': 'Range Not Satisfiable',
            '417': 'Expectation Failed',
            '418': "I'm a Teapot",
            '421': 'Misdirected Request',
            '422': 'Unprocessable Entity',
            '423': 'Locked',
            '424': 'Failed Dependency',
            '425': 'Too Early',
            '426': 'Upgrade Required',
            '428': 'Precondition Required',
            '429': 'Too Many Requests',
            '431': 'Request Header Fields Too Large',
            '451': 'Unavailable For Legal Reasons',
            '500': 'Internal Server Error',
            '501': 'Not Implemented',
            '502': 'Bad Gateway',
            '503': 'Service Unavailable',
            '504': 'Gateway Timeout',
            '505': 'HTTP Version Not Supported',
            '506': 'Variant Also Negotiates',
            '507': 'Insufficient Storage',
            '508': 'Loop Detected',
            '509': 'Bandwidth Limit Exceeded',
            '510': 'Not Extended',
            '511': 'Network Authentication Required'
          },
          Agent: [Function: Agent] { defaultMaxSockets: Infinity },
          ClientRequest: [Function: ClientRequest],
          IncomingMessage: [Function: IncomingMessage],
          OutgoingMessage: [Function: OutgoingMessage],
          Server: [Function: Server],
          ServerResponse: [Function: ServerResponse],
          createServer: [Function: createServer],
          validateHeaderName: [Function: wrappedFn] {
            withoutStackTrace: [Function (anonymous)]
          },
          validateHeaderValue: [Function: wrappedFn] {
            withoutStackTrace: [Function (anonymous)]
          },
          get: [Function: get],
          request: [Function: request],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          maxHeaderSize: [Getter],
          globalAgent: [Getter/Setter]
        },
        'https:': {
          Agent: [Function: Agent],
          globalAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: true,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(shapeMode)]: false,
            [Symbol(kCapture)]: false
          },
          Server: [Function: Server],
          createServer: [Function: createServer],
          get: [Function: get],
          request: [Function: request]
        }
      },
      pathname: '/analyze/pose'
    },
    _ended: false,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 322,
    _requestBodyBuffers: [
      {
        data: <Buffer 7b 22 65 78 65 72 63 69 73 65 22 3a 22 73 71 75 61 74 22 2c 22 6c 61 6e 64 6d 61 72 6b 73 22 3a 5b 7b 22 78 22 3a 30 2e 35 2c 22 79 22 3a 30 2e 33 2c ... 272 more bytes>,
        encoding: undefined
      }
    ],
    _eventsCount: 3,
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        response: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 322,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: true,
      _closed: false,
      socket: Socket {
        connecting: false,
        _hadError: true,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: {
          close: [
            [Function: onClose],
            [Function: socketCloseListener],
            [Function: bound onceWrapper] {
              listener: [Function: onClose]
            }
          ],
          error: [Function: socketErrorListener],
          prefinish: undefined,
          finish: undefined,
          drain: [Function: ondrain],
          data: undefined,
          end: [Function: onReadableStreamEnd],
          readable: undefined,
          connect: [
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: bound onceWrapper] {
              listener: [Function: connect]
            },
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            }
          ],
          free: [Function: onFree],
          timeout: [
            [Function: onTimeout],
            [Function: bound onceWrapper] {
              listener: [Function: emitRequestTimeout]
            },
            [Function (anonymous)]
          ],
          agentRemove: [Function: onRemove]
        },
        _readableState: ReadableState {
          highWaterMark: 16384,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          [Symbol(kState)]: 59777526,
          [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
              at internalConnectMultiple (node:net:1122:18)
              at afterConnectMultiple (node:net:1689:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 8081
              },
              Error: connect ECONNREFUSED 127.0.0.1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 8081
              }
            ]
          }
        },
        _writableState: WritableState {
          highWaterMark: 16384,
          length: 615,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 615,
          bufferedIndex: 0,
          pendingcb: 1,
          [Symbol(kState)]: 118260214,
          [Symbol(kBufferedValue)]: null,
          [Symbol(kWriteCbValue)]: [Function (anonymous)],
          [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
              at internalConnectMultiple (node:net:1122:18)
              at afterConnectMultiple (node:net:1689:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 8081
              },
              Error: connect ECONNREFUSED 127.0.0.1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 8081
              }
            ]
          }
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 8,
        _sockname: null,
        _pendingData: [
          {
            chunk: 'POST /analyze/pose HTTP/1.1\r\n' +
              'Accept: application/json, text/plain, */*\r\n' +
              'Content-Type: application/json\r\n' +
              'Authorization: Bearer your_mastra_api_key_here\r\n' +
              'User-Agent: axios/1.12.2\r\n' +
              'Content-Length: 322\r\n' +
              'Accept-Encoding: gzip, compress, deflate, br\r\n' +
              'Host: localhost:8081\r\n' +
              'Connection: keep-alive\r\n' +
              '\r\n',
            encoding: 'latin1',
            callback: [Function: nop]
          },
          {
            chunk: <Buffer 7b 22 65 78 65 72 63 69 73 65 22 3a 22 73 71 75 61 74 22 2c 22 6c 61 6e 64 6d 61 72 6b 73 22 3a 5b 7b 22 78 22 3a 30 2e 35 2c 22 79 22 3a 30 2e 33 2c ... 272 more bytes>,
            encoding: 'buffer',
            callback: [Function (anonymous)]
          },
          allBuffers: false
        ],
        _pendingEncoding: '',
        server: null,
        _server: null,
        timeout: 15000,
        parser: null,
        _httpMessage: [Circular *1],
        autoSelectFamilyAttemptedAddresses: [ '::1:8081', '127.0.0.1:8081' ],
        [Symbol(async_id_symbol)]: 344,
        [Symbol(kHandle)]: null,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: -1,
          _idlePrev: null,
          _idleNext: null,
          _idleStart: 24155,
          _onTimeout: null,
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: true,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 337,
          [Symbol(triggerId)]: 327
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'POST /analyze/pose HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Bearer your_mastra_api_key_here\r\n' +
        'User-Agent: axios/1.12.2\r\n' +
        'Content-Length: 322\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:8081\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] {
          keepAlive: true,
          scheduling: 'lifo',
          timeout: 5000,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'localhost:8081:': [
            Socket {
              connecting: false,
              _hadError: true,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _events: {
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener],
                  [Function: bound onceWrapper] {
                    listener: [Function: onClose]
                  }
                ],
                error: [Function: socketErrorListener],
                prefinish: undefined,
                finish: undefined,
                drain: [Function: ondrain],
                data: undefined,
                end: [Function: onReadableStreamEnd],
                readable: undefined,
                connect: [
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function: connect]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                ],
                free: [Function: onFree],
                timeout: [
                  [Function: onTimeout],
                  [Function: bound onceWrapper] {
                    listener: [Function: emitRequestTimeout]
                  },
                  [Function (anonymous)]
                ],
                agentRemove: [Function: onRemove]
              },
              _readableState: ReadableState {
                highWaterMark: 16384,
                buffer: [],
                bufferIndex: 0,
                length: 0,
                pipes: [],
                awaitDrainWriters: null,
                [Symbol(kState)]: 59777526,
                [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
                    at internalConnectMultiple (node:net:1122:18)
                    at afterConnectMultiple (node:net:1689:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 8081
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 8081
                    }
                  ]
                }
              },
              _writableState: WritableState {
                highWaterMark: 16384,
                length: 615,
                corked: 0,
                onwrite: [Function: bound onwrite],
                writelen: 615,
                bufferedIndex: 0,
                pendingcb: 1,
                [Symbol(kState)]: 118260214,
                [Symbol(kBufferedValue)]: null,
                [Symbol(kWriteCbValue)]: [Function (anonymous)],
                [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
                    at internalConnectMultiple (node:net:1122:18)
                    at afterConnectMultiple (node:net:1689:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 8081
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 8081
                    }
                  ]
                }
              },
              allowHalfOpen: false,
              _maxListeners: undefined,
              _eventsCount: 8,
              _sockname: null,
              _pendingData: [
                {
                  chunk: 'POST /analyze/pose HTTP/1.1\r\n' +
                    'Accept: application/json, text/plain, */*\r\n' +
                    'Content-Type: application/json\r\n' +
                    'Authorization: Bearer your_mastra_api_key_here\r\n' +
                    'User-Agent: axios/1.12.2\r\n' +
                    'Content-Length: 322\r\n' +
                    'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                    'Host: localhost:8081\r\n' +
                    'Connection: keep-alive\r\n' +
                    '\r\n',
                  encoding: 'latin1',
                  callback: [Function: nop]
                },
                {
                  chunk: <Buffer 7b 22 65 78 65 72 63 69 73 65 22 3a 22 73 71 75 61 74 22 2c 22 6c 61 6e 64 6d 61 72 6b 73 22 3a 5b 7b 22 78 22 3a 30 2e 35 2c 22 79 22 3a 30 2e 33 2c ... 272 more bytes>,
                  encoding: 'buffer',
                  callback: [Function (anonymous)]
                },
                allBuffers: false
              ],
              _pendingEncoding: '',
              server: null,
              _server: null,
              timeout: 15000,
              parser: null,
              _httpMessage: [Circular *1],
              autoSelectFamilyAttemptedAddresses: [ '::1:8081', '127.0.0.1:8081' ],
              [Symbol(async_id_symbol)]: 344,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: Timeout {
                _idleTimeout: -1,
                _idlePrev: null,
                _idleNext: null,
                _idleStart: 24155,
                _onTimeout: null,
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: true,
                [Symbol(refed)]: false,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 337,
                [Symbol(triggerId)]: 327
              },
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(shapeMode)]: true,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: true,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/analyze/pose',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: [Function: emitRequestTimeout],
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Circular *2],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [ 'Authorization', 'Bearer your_mastra_api_key_here' ],
        'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
        'content-length': [ 'Content-Length', '322' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:8081' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _currentUrl: 'http://localhost:8081/analyze/pose',
    _timeout: null,
    [Symbol(shapeMode)]: true,
    [Symbol(kCapture)]: false
  },
  level: 'error',
  stack: 'AggregateError: Error\n' +
    '    at Function.AxiosError.from (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/AxiosError.js:96:14)\n' +
    '    at RedirectableRequest.handleRequestError (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/adapters/http.js:638:25)\n' +
    '    at RedirectableRequest.emit (node:events:536:35)\n' +
    '    at eventHandlers.<computed> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/follow-redirects@1.15.11/node_modules/follow-redirects/index.js:49:24)\n' +
    '    at ClientRequest.emit (node:events:524:28)\n' +
    '    at emitErrorEvent (node:_http_client:101:11)\n' +
    '    at Socket.socketErrorListener (node:_http_client:504:5)\n' +
    '    at Socket.emit (node:events:524:28)\n' +
    '    at emitErrorNT (node:internal/streams/destroy:169:8)\n' +
    '    at emitErrorCloseNT (node:internal/streams/destroy:128:3)\n' +
    '    at Axios.request (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/Axios.js:45:41)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async MastraService.analyzePose (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/services/mastra.service.ts:118:24)\n' +
    '    at async <anonymous> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/routes/pose.ts:55:30)',
  cause: AggregateError [ECONNREFUSED]: 
      at internalConnectMultiple (node:net:1122:18)
      at afterConnectMultiple (node:net:1689:7) {
    code: 'ECONNREFUSED',
    [errors]: [
      Error: connect ECONNREFUSED ::1:8081
          at createConnectionError (node:net:1652:14)
          at afterConnectMultiple (node:net:1682:16) {
        errno: -61,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 8081
      },
      Error: connect ECONNREFUSED 127.0.0.1:8081
          at createConnectionError (node:net:1652:14)
          at afterConnectMultiple (node:net:1682:16) {
        errno: -61,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 8081
      }
    ]
  },
  timestamp: '2025-09-27 18:32:07'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'Analytics retrieval error: import_mastra.mastraService.getUserAnalytics is not a function',
  stack: 'TypeError: import_mastra.mastraService.getUserAnalytics is not a function\n' +
    '    at <anonymous> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/routes/metrics.ts:102:43)\n' +
    '    at Layer.handle [as handle_request] (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at next (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/route.js:149:13)\n' +
    '    at Route.dispatch (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/route.js:119:3)\n' +
    '    at Layer.handle [as handle_request] (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at /Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:284:15\n' +
    '    at Function.process_params (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at Function.handle (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:175:3)\n' +
    '    at router (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:47:12)',
  timestamp: '2025-09-27 18:32:10'
}
{
  service: 'forma-backend',
  status: 401,
  headers: Headers {
    date: 'Sat, 27 Sep 2025 22:32:15 GMT',
    'content-type': 'application/json; charset=utf-8',
    'content-length': '277',
    connection: 'keep-alive',
    vary: 'Origin',
    'x-request-id': 'req_0c5e0098eade4988a1cfa0bb7cb2d34c',
    'x-envoy-upstream-service-time': '2',
    'x-openai-proxy-wasm': 'v0.1',
    'cf-cache-status': 'DYNAMIC',
    'set-cookie': '__cf_bm=NsmBoOKvZyYYn6bMMygDD6FRia8YA..EbpAjyQ21gsg-1759012335-1.0.1.1-Y7rF.5Lqh7uPPb.6Co.ENjmqpiRVa.AY_gxjQcVL3bEjNJFs5nTehxJhFq8uGj5kXyW1yS1FvUzt8kgfC2Z4UjRDn5zPVfgosXbWb5QXFzc; path=/; expires=Sat, 27-Sep-25 23:02:15 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None, _cfuvid=tRjEr6NuyLO.BOYhRy1uU0J.8_rx2jGWJPTbwY1jh58-1759012335041-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None',
    'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
    'x-content-type-options': 'nosniff',
    server: 'cloudflare',
    'cf-ray': '985e74b56f545a09-IAD',
    'alt-svc': 'h3=":443"; ma=86400'
  },
  requestID: 'req_0c5e0098eade4988a1cfa0bb7cb2d34c',
  error: {
    message: 'Incorrect API key provided: sk-your-***************here. You can find your API key at https://platform.openai.com/account/api-keys.',
    type: 'invalid_request_error',
    param: null,
    code: 'invalid_api_key'
  },
  code: 'invalid_api_key',
  param: null,
  type: 'invalid_request_error',
  level: 'error',
  message: 'GPT-5 analysis error: 401 Incorrect API key provided: sk-your-***************here. You can find your API key at https://platform.openai.com/account/api-keys.',
  stack: 'Error: 401 Incorrect API key provided: sk-your-***************here. You can find your API key at https://platform.openai.com/account/api-keys.\n' +
    '    at Function.generate (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/openai@5.23.1_zod@3.25.76/node_modules/openai/src/core/error.ts:76:14)\n' +
    '    at OpenAI.makeStatusError (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/openai@5.23.1_zod@3.25.76/node_modules/openai/src/client.ts:463:28)\n' +
    '    at OpenAI.makeRequest (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/openai@5.23.1_zod@3.25.76/node_modules/openai/src/client.ts:713:24)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async <anonymous> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/routes/analyze.ts:129:24)',
  timestamp: '2025-09-27 18:32:14'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'Mastra API Response Error:',
  timestamp: '2025-09-27 18:36:49'
}
{
  service: 'forma-backend',
  code: 'ECONNREFUSED',
  errors: [
    Error: connect ECONNREFUSED ::1:8081
        at createConnectionError (node:net:1652:14)
        at afterConnectMultiple (node:net:1682:16) {
      errno: -61,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '::1',
      port: 8081
    },
    Error: connect ECONNREFUSED 127.0.0.1:8081
        at createConnectionError (node:net:1652:14)
        at afterConnectMultiple (node:net:1682:16) {
      errno: -61,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 8081
    }
  ],
  message: '❌ Mastra connection error: Error',
  name: 'AggregateError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 15000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: 'Bearer your_mastra_api_key_here',
      'User-Agent': 'axios/1.12.2',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    baseURL: 'http://localhost:8081',
    method: 'get',
    url: '/health',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *2> Writable {
    _events: {
      close: undefined,
      error: [Function: handleRequestError],
      prefinish: undefined,
      finish: undefined,
      drain: undefined,
      response: [Function: handleResponse],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ],
      timeout: undefined,
      abort: undefined
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 17580812,
      [Symbol(kBufferedValue)]: null
    },
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: 'http:',
      path: '/health',
      method: 'GET',
      headers: [Object: null prototype] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Bearer your_mastra_api_key_here',
        'User-Agent': 'axios/1.12.2',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      agents: { http: undefined, https: undefined },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: { proxy: [Function: beforeRedirect] },
      hostname: 'localhost',
      port: '8081',
      agent: undefined,
      nativeProtocols: {
        'http:': {
          _connectionListener: [Function: connectionListener],
          METHODS: [
            'ACL',        'BIND',        'CHECKOUT',
            'CONNECT',    'COPY',        'DELETE',
            'GET',        'HEAD',        'LINK',
            'LOCK',       'M-SEARCH',    'MERGE',
            'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
            'MOVE',       'NOTIFY',      'OPTIONS',
            'PATCH',      'POST',        'PROPFIND',
            'PROPPATCH',  'PURGE',       'PUT',
            'QUERY',      'REBIND',      'REPORT',
            'SEARCH',     'SOURCE',      'SUBSCRIBE',
            'TRACE',      'UNBIND',      'UNLINK',
            'UNLOCK',     'UNSUBSCRIBE'
          ],
          STATUS_CODES: {
            '100': 'Continue',
            '101': 'Switching Protocols',
            '102': 'Processing',
            '103': 'Early Hints',
            '200': 'OK',
            '201': 'Created',
            '202': 'Accepted',
            '203': 'Non-Authoritative Information',
            '204': 'No Content',
            '205': 'Reset Content',
            '206': 'Partial Content',
            '207': 'Multi-Status',
            '208': 'Already Reported',
            '226': 'IM Used',
            '300': 'Multiple Choices',
            '301': 'Moved Permanently',
            '302': 'Found',
            '303': 'See Other',
            '304': 'Not Modified',
            '305': 'Use Proxy',
            '307': 'Temporary Redirect',
            '308': 'Permanent Redirect',
            '400': 'Bad Request',
            '401': 'Unauthorized',
            '402': 'Payment Required',
            '403': 'Forbidden',
            '404': 'Not Found',
            '405': 'Method Not Allowed',
            '406': 'Not Acceptable',
            '407': 'Proxy Authentication Required',
            '408': 'Request Timeout',
            '409': 'Conflict',
            '410': 'Gone',
            '411': 'Length Required',
            '412': 'Precondition Failed',
            '413': 'Payload Too Large',
            '414': 'URI Too Long',
            '415': 'Unsupported Media Type',
            '416': 'Range Not Satisfiable',
            '417': 'Expectation Failed',
            '418': "I'm a Teapot",
            '421': 'Misdirected Request',
            '422': 'Unprocessable Entity',
            '423': 'Locked',
            '424': 'Failed Dependency',
            '425': 'Too Early',
            '426': 'Upgrade Required',
            '428': 'Precondition Required',
            '429': 'Too Many Requests',
            '431': 'Request Header Fields Too Large',
            '451': 'Unavailable For Legal Reasons',
            '500': 'Internal Server Error',
            '501': 'Not Implemented',
            '502': 'Bad Gateway',
            '503': 'Service Unavailable',
            '504': 'Gateway Timeout',
            '505': 'HTTP Version Not Supported',
            '506': 'Variant Also Negotiates',
            '507': 'Insufficient Storage',
            '508': 'Loop Detected',
            '509': 'Bandwidth Limit Exceeded',
            '510': 'Not Extended',
            '511': 'Network Authentication Required'
          },
          Agent: [Function: Agent] { defaultMaxSockets: Infinity },
          ClientRequest: [Function: ClientRequest],
          IncomingMessage: [Function: IncomingMessage],
          OutgoingMessage: [Function: OutgoingMessage],
          Server: [Function: Server],
          ServerResponse: [Function: ServerResponse],
          createServer: [Function: createServer],
          validateHeaderName: [Function: wrappedFn] {
            withoutStackTrace: [Function (anonymous)]
          },
          validateHeaderValue: [Function: wrappedFn] {
            withoutStackTrace: [Function (anonymous)]
          },
          get: [Function: get],
          request: [Function: request],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          maxHeaderSize: [Getter],
          globalAgent: [Getter/Setter]
        },
        'https:': {
          Agent: [Function: Agent],
          globalAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: true,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(shapeMode)]: false,
            [Symbol(kCapture)]: false
          },
          Server: [Function: Server],
          createServer: [Function: createServer],
          get: [Function: get],
          request: [Function: request]
        }
      },
      pathname: '/health'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _eventsCount: 3,
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        response: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: Socket {
        connecting: false,
        _hadError: true,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: {
          close: [
            [Function: onClose],
            [Function: socketCloseListener],
            [Function: bound onceWrapper] {
              listener: [Function: onClose]
            }
          ],
          error: [Function: socketErrorListener],
          prefinish: undefined,
          finish: undefined,
          drain: [Function: ondrain],
          data: undefined,
          end: [Function: onReadableStreamEnd],
          readable: undefined,
          connect: [
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: bound onceWrapper] {
              listener: [Function: connect]
            },
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            }
          ],
          free: [Function: onFree],
          timeout: [
            [Function: onTimeout],
            [Function: bound onceWrapper] {
              listener: [Function: emitRequestTimeout]
            },
            [Function (anonymous)]
          ],
          agentRemove: [Function: onRemove]
        },
        _readableState: ReadableState {
          highWaterMark: 16384,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          [Symbol(kState)]: 59777526,
          [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
              at internalConnectMultiple (node:net:1122:18)
              at afterConnectMultiple (node:net:1689:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 8081
              },
              Error: connect ECONNREFUSED 127.0.0.1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 8081
              }
            ]
          }
        },
        _writableState: WritableState {
          highWaterMark: 16384,
          length: 265,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 265,
          bufferedIndex: 0,
          pendingcb: 1,
          [Symbol(kState)]: 118260214,
          [Symbol(kBufferedValue)]: null,
          [Symbol(kWriteCbValue)]: [Function: bound onFinish],
          [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
              at internalConnectMultiple (node:net:1122:18)
              at afterConnectMultiple (node:net:1689:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 8081
              },
              Error: connect ECONNREFUSED 127.0.0.1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 8081
              }
            ]
          }
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 8,
        _sockname: null,
        _pendingData: 'GET /health HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'Authorization: Bearer your_mastra_api_key_here\r\n' +
          'User-Agent: axios/1.12.2\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:8081\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _pendingEncoding: 'latin1',
        server: null,
        _server: null,
        timeout: 15000,
        parser: null,
        _httpMessage: [Circular *1],
        autoSelectFamilyAttemptedAddresses: [ '::1:8081', '127.0.0.1:8081' ],
        [Symbol(async_id_symbol)]: 177,
        [Symbol(kHandle)]: null,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: -1,
          _idlePrev: null,
          _idleNext: null,
          _idleStart: 176485,
          _onTimeout: null,
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: true,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 174,
          [Symbol(triggerId)]: 169
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'GET /health HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Bearer your_mastra_api_key_here\r\n' +
        'User-Agent: axios/1.12.2\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:8081\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] {
          keepAlive: true,
          scheduling: 'lifo',
          timeout: 5000,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'localhost:8081:': [
            Socket {
              connecting: false,
              _hadError: true,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _events: {
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener],
                  [Function: bound onceWrapper] {
                    listener: [Function: onClose]
                  }
                ],
                error: [Function: socketErrorListener],
                prefinish: undefined,
                finish: undefined,
                drain: [Function: ondrain],
                data: undefined,
                end: [Function: onReadableStreamEnd],
                readable: undefined,
                connect: [
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function: connect]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                ],
                free: [Function: onFree],
                timeout: [
                  [Function: onTimeout],
                  [Function: bound onceWrapper] {
                    listener: [Function: emitRequestTimeout]
                  },
                  [Function (anonymous)]
                ],
                agentRemove: [Function: onRemove]
              },
              _readableState: ReadableState {
                highWaterMark: 16384,
                buffer: [],
                bufferIndex: 0,
                length: 0,
                pipes: [],
                awaitDrainWriters: null,
                [Symbol(kState)]: 59777526,
                [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
                    at internalConnectMultiple (node:net:1122:18)
                    at afterConnectMultiple (node:net:1689:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 8081
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 8081
                    }
                  ]
                }
              },
              _writableState: WritableState {
                highWaterMark: 16384,
                length: 265,
                corked: 0,
                onwrite: [Function: bound onwrite],
                writelen: 265,
                bufferedIndex: 0,
                pendingcb: 1,
                [Symbol(kState)]: 118260214,
                [Symbol(kBufferedValue)]: null,
                [Symbol(kWriteCbValue)]: [Function: bound onFinish],
                [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
                    at internalConnectMultiple (node:net:1122:18)
                    at afterConnectMultiple (node:net:1689:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 8081
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 8081
                    }
                  ]
                }
              },
              allowHalfOpen: false,
              _maxListeners: undefined,
              _eventsCount: 8,
              _sockname: null,
              _pendingData: 'GET /health HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'Authorization: Bearer your_mastra_api_key_here\r\n' +
                'User-Agent: axios/1.12.2\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:8081\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              _pendingEncoding: 'latin1',
              server: null,
              _server: null,
              timeout: 15000,
              parser: null,
              _httpMessage: [Circular *1],
              autoSelectFamilyAttemptedAddresses: [ '::1:8081', '127.0.0.1:8081' ],
              [Symbol(async_id_symbol)]: 177,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: Timeout {
                _idleTimeout: -1,
                _idlePrev: null,
                _idleNext: null,
                _idleStart: 176485,
                _onTimeout: null,
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: true,
                [Symbol(refed)]: false,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 174,
                [Symbol(triggerId)]: 169
              },
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(shapeMode)]: true,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: true,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/health',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: [Function: emitRequestTimeout],
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Circular *2],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [ 'Authorization', 'Bearer your_mastra_api_key_here' ],
        'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:8081' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _currentUrl: 'http://localhost:8081/health',
    _timeout: null,
    [Symbol(shapeMode)]: true,
    [Symbol(kCapture)]: false
  },
  level: 'error',
  stack: 'AggregateError: Error\n' +
    '    at Function.AxiosError.from (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/AxiosError.js:96:14)\n' +
    '    at RedirectableRequest.handleRequestError (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/adapters/http.js:638:25)\n' +
    '    at RedirectableRequest.emit (node:events:536:35)\n' +
    '    at eventHandlers.<computed> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/follow-redirects@1.15.11/node_modules/follow-redirects/index.js:49:24)\n' +
    '    at ClientRequest.emit (node:events:524:28)\n' +
    '    at emitErrorEvent (node:_http_client:101:11)\n' +
    '    at Socket.socketErrorListener (node:_http_client:504:5)\n' +
    '    at Socket.emit (node:events:524:28)\n' +
    '    at emitErrorNT (node:internal/streams/destroy:169:8)\n' +
    '    at emitErrorCloseNT (node:internal/streams/destroy:128:3)\n' +
    '    at Axios.request (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/Axios.js:45:41)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async MastraService.connect (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/services/mastra.service.ts:99:24)\n' +
    '    at async MastraService.getUserAnalytics (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/services/mastra.service.ts:368:9)\n' +
    '    at async <anonymous> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/routes/metrics.ts:102:23)',
  cause: AggregateError [ECONNREFUSED]: 
      at internalConnectMultiple (node:net:1122:18)
      at afterConnectMultiple (node:net:1689:7) {
    code: 'ECONNREFUSED',
    [errors]: [
      Error: connect ECONNREFUSED ::1:8081
          at createConnectionError (node:net:1652:14)
          at afterConnectMultiple (node:net:1682:16) {
        errno: -61,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 8081
      },
      Error: connect ECONNREFUSED 127.0.0.1:8081
          at createConnectionError (node:net:1652:14)
          at afterConnectMultiple (node:net:1682:16) {
        errno: -61,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 8081
      }
    ]
  },
  timestamp: '2025-09-27 18:36:49'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'Mastra API Response Error:',
  timestamp: '2025-09-27 18:36:49'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'Mastra API Response Error:',
  timestamp: '2025-09-27 18:36:49'
}
{
  service: 'forma-backend',
  code: 'ECONNREFUSED',
  errors: [
    Error: connect ECONNREFUSED ::1:8081
        at createConnectionError (node:net:1652:14)
        at afterConnectMultiple (node:net:1682:16) {
      errno: -61,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '::1',
      port: 8081
    },
    Error: connect ECONNREFUSED 127.0.0.1:8081
        at createConnectionError (node:net:1652:14)
        at afterConnectMultiple (node:net:1682:16) {
      errno: -61,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 8081
    }
  ],
  message: '❌ Mastra connection error: Error',
  name: 'AggregateError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 15000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: 'Bearer your_mastra_api_key_here',
      'User-Agent': 'axios/1.12.2',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    baseURL: 'http://localhost:8081',
    method: 'get',
    url: '/health',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *2> Writable {
    _events: {
      close: undefined,
      error: [Function: handleRequestError],
      prefinish: undefined,
      finish: undefined,
      drain: undefined,
      response: [Function: handleResponse],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ],
      timeout: undefined,
      abort: undefined
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 17580812,
      [Symbol(kBufferedValue)]: null
    },
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: 'http:',
      path: '/health',
      method: 'GET',
      headers: [Object: null prototype] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Bearer your_mastra_api_key_here',
        'User-Agent': 'axios/1.12.2',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      agents: { http: undefined, https: undefined },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: { proxy: [Function: beforeRedirect] },
      hostname: 'localhost',
      port: '8081',
      agent: undefined,
      nativeProtocols: {
        'http:': {
          _connectionListener: [Function: connectionListener],
          METHODS: [
            'ACL',        'BIND',        'CHECKOUT',
            'CONNECT',    'COPY',        'DELETE',
            'GET',        'HEAD',        'LINK',
            'LOCK',       'M-SEARCH',    'MERGE',
            'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
            'MOVE',       'NOTIFY',      'OPTIONS',
            'PATCH',      'POST',        'PROPFIND',
            'PROPPATCH',  'PURGE',       'PUT',
            'QUERY',      'REBIND',      'REPORT',
            'SEARCH',     'SOURCE',      'SUBSCRIBE',
            'TRACE',      'UNBIND',      'UNLINK',
            'UNLOCK',     'UNSUBSCRIBE'
          ],
          STATUS_CODES: {
            '100': 'Continue',
            '101': 'Switching Protocols',
            '102': 'Processing',
            '103': 'Early Hints',
            '200': 'OK',
            '201': 'Created',
            '202': 'Accepted',
            '203': 'Non-Authoritative Information',
            '204': 'No Content',
            '205': 'Reset Content',
            '206': 'Partial Content',
            '207': 'Multi-Status',
            '208': 'Already Reported',
            '226': 'IM Used',
            '300': 'Multiple Choices',
            '301': 'Moved Permanently',
            '302': 'Found',
            '303': 'See Other',
            '304': 'Not Modified',
            '305': 'Use Proxy',
            '307': 'Temporary Redirect',
            '308': 'Permanent Redirect',
            '400': 'Bad Request',
            '401': 'Unauthorized',
            '402': 'Payment Required',
            '403': 'Forbidden',
            '404': 'Not Found',
            '405': 'Method Not Allowed',
            '406': 'Not Acceptable',
            '407': 'Proxy Authentication Required',
            '408': 'Request Timeout',
            '409': 'Conflict',
            '410': 'Gone',
            '411': 'Length Required',
            '412': 'Precondition Failed',
            '413': 'Payload Too Large',
            '414': 'URI Too Long',
            '415': 'Unsupported Media Type',
            '416': 'Range Not Satisfiable',
            '417': 'Expectation Failed',
            '418': "I'm a Teapot",
            '421': 'Misdirected Request',
            '422': 'Unprocessable Entity',
            '423': 'Locked',
            '424': 'Failed Dependency',
            '425': 'Too Early',
            '426': 'Upgrade Required',
            '428': 'Precondition Required',
            '429': 'Too Many Requests',
            '431': 'Request Header Fields Too Large',
            '451': 'Unavailable For Legal Reasons',
            '500': 'Internal Server Error',
            '501': 'Not Implemented',
            '502': 'Bad Gateway',
            '503': 'Service Unavailable',
            '504': 'Gateway Timeout',
            '505': 'HTTP Version Not Supported',
            '506': 'Variant Also Negotiates',
            '507': 'Insufficient Storage',
            '508': 'Loop Detected',
            '509': 'Bandwidth Limit Exceeded',
            '510': 'Not Extended',
            '511': 'Network Authentication Required'
          },
          Agent: [Function: Agent] { defaultMaxSockets: Infinity },
          ClientRequest: [Function: ClientRequest],
          IncomingMessage: [Function: IncomingMessage],
          OutgoingMessage: [Function: OutgoingMessage],
          Server: [Function: Server],
          ServerResponse: [Function: ServerResponse],
          createServer: [Function: createServer],
          validateHeaderName: [Function: wrappedFn] {
            withoutStackTrace: [Function (anonymous)]
          },
          validateHeaderValue: [Function: wrappedFn] {
            withoutStackTrace: [Function (anonymous)]
          },
          get: [Function: get],
          request: [Function: request],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          maxHeaderSize: [Getter],
          globalAgent: [Getter/Setter]
        },
        'https:': {
          Agent: [Function: Agent],
          globalAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: true,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(shapeMode)]: false,
            [Symbol(kCapture)]: false
          },
          Server: [Function: Server],
          createServer: [Function: createServer],
          get: [Function: get],
          request: [Function: request]
        }
      },
      pathname: '/health'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _eventsCount: 3,
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        response: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: Socket {
        connecting: false,
        _hadError: true,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: {
          close: [
            [Function: onClose],
            [Function: socketCloseListener],
            [Function: bound onceWrapper] {
              listener: [Function: onClose]
            }
          ],
          error: [Function: socketErrorListener],
          prefinish: undefined,
          finish: undefined,
          drain: [Function: ondrain],
          data: undefined,
          end: [Function: onReadableStreamEnd],
          readable: undefined,
          connect: [
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: bound onceWrapper] {
              listener: [Function: connect]
            },
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            }
          ],
          free: [Function: onFree],
          timeout: [
            [Function: onTimeout],
            [Function: bound onceWrapper] {
              listener: [Function: emitRequestTimeout]
            },
            [Function (anonymous)]
          ],
          agentRemove: [Function: onRemove]
        },
        _readableState: ReadableState {
          highWaterMark: 16384,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          [Symbol(kState)]: 59777526,
          [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
              at internalConnectMultiple (node:net:1122:18)
              at afterConnectMultiple (node:net:1689:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 8081
              },
              Error: connect ECONNREFUSED 127.0.0.1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 8081
              }
            ]
          }
        },
        _writableState: WritableState {
          highWaterMark: 16384,
          length: 265,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 265,
          bufferedIndex: 0,
          pendingcb: 1,
          [Symbol(kState)]: 118260214,
          [Symbol(kBufferedValue)]: null,
          [Symbol(kWriteCbValue)]: [Function: bound onFinish],
          [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
              at internalConnectMultiple (node:net:1122:18)
              at afterConnectMultiple (node:net:1689:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 8081
              },
              Error: connect ECONNREFUSED 127.0.0.1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 8081
              }
            ]
          }
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 8,
        _sockname: null,
        _pendingData: 'GET /health HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'Authorization: Bearer your_mastra_api_key_here\r\n' +
          'User-Agent: axios/1.12.2\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:8081\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _pendingEncoding: 'latin1',
        server: null,
        _server: null,
        timeout: 15000,
        parser: null,
        _httpMessage: [Circular *1],
        autoSelectFamilyAttemptedAddresses: [ '::1:8081', '127.0.0.1:8081' ],
        [Symbol(async_id_symbol)]: 239,
        [Symbol(kHandle)]: null,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: -1,
          _idlePrev: null,
          _idleNext: null,
          _idleStart: 176516,
          _onTimeout: null,
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: true,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 235,
          [Symbol(triggerId)]: 230
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'GET /health HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Bearer your_mastra_api_key_here\r\n' +
        'User-Agent: axios/1.12.2\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:8081\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] {
          keepAlive: true,
          scheduling: 'lifo',
          timeout: 5000,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'localhost:8081:': [
            Socket {
              connecting: false,
              _hadError: true,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _events: {
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener],
                  [Function: bound onceWrapper] {
                    listener: [Function: onClose]
                  }
                ],
                error: [Function: socketErrorListener],
                prefinish: undefined,
                finish: undefined,
                drain: [Function: ondrain],
                data: undefined,
                end: [Function: onReadableStreamEnd],
                readable: undefined,
                connect: [
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function: connect]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                ],
                free: [Function: onFree],
                timeout: [
                  [Function: onTimeout],
                  [Function: bound onceWrapper] {
                    listener: [Function: emitRequestTimeout]
                  },
                  [Function (anonymous)]
                ],
                agentRemove: [Function: onRemove]
              },
              _readableState: ReadableState {
                highWaterMark: 16384,
                buffer: [],
                bufferIndex: 0,
                length: 0,
                pipes: [],
                awaitDrainWriters: null,
                [Symbol(kState)]: 59777526,
                [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
                    at internalConnectMultiple (node:net:1122:18)
                    at afterConnectMultiple (node:net:1689:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 8081
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 8081
                    }
                  ]
                }
              },
              _writableState: WritableState {
                highWaterMark: 16384,
                length: 265,
                corked: 0,
                onwrite: [Function: bound onwrite],
                writelen: 265,
                bufferedIndex: 0,
                pendingcb: 1,
                [Symbol(kState)]: 118260214,
                [Symbol(kBufferedValue)]: null,
                [Symbol(kWriteCbValue)]: [Function: bound onFinish],
                [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
                    at internalConnectMultiple (node:net:1122:18)
                    at afterConnectMultiple (node:net:1689:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 8081
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 8081
                    }
                  ]
                }
              },
              allowHalfOpen: false,
              _maxListeners: undefined,
              _eventsCount: 8,
              _sockname: null,
              _pendingData: 'GET /health HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'Authorization: Bearer your_mastra_api_key_here\r\n' +
                'User-Agent: axios/1.12.2\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:8081\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              _pendingEncoding: 'latin1',
              server: null,
              _server: null,
              timeout: 15000,
              parser: null,
              _httpMessage: [Circular *1],
              autoSelectFamilyAttemptedAddresses: [ '::1:8081', '127.0.0.1:8081' ],
              [Symbol(async_id_symbol)]: 239,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: Timeout {
                _idleTimeout: -1,
                _idlePrev: null,
                _idleNext: null,
                _idleStart: 176516,
                _onTimeout: null,
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: true,
                [Symbol(refed)]: false,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 235,
                [Symbol(triggerId)]: 230
              },
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(shapeMode)]: true,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: true,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/health',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: [Function: emitRequestTimeout],
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Circular *2],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [ 'Authorization', 'Bearer your_mastra_api_key_here' ],
        'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:8081' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _currentUrl: 'http://localhost:8081/health',
    _timeout: null,
    [Symbol(shapeMode)]: true,
    [Symbol(kCapture)]: false
  },
  level: 'error',
  stack: 'AggregateError: Error\n' +
    '    at Function.AxiosError.from (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/AxiosError.js:96:14)\n' +
    '    at RedirectableRequest.handleRequestError (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/adapters/http.js:638:25)\n' +
    '    at RedirectableRequest.emit (node:events:536:35)\n' +
    '    at eventHandlers.<computed> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/follow-redirects@1.15.11/node_modules/follow-redirects/index.js:49:24)\n' +
    '    at ClientRequest.emit (node:events:524:28)\n' +
    '    at emitErrorEvent (node:_http_client:101:11)\n' +
    '    at Socket.socketErrorListener (node:_http_client:504:5)\n' +
    '    at Socket.emit (node:events:524:28)\n' +
    '    at emitErrorNT (node:internal/streams/destroy:169:8)\n' +
    '    at emitErrorCloseNT (node:internal/streams/destroy:128:3)\n' +
    '    at Axios.request (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/Axios.js:45:41)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async MastraService.connect (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/services/mastra.service.ts:99:24)\n' +
    '    at async MastraService.getPersonalizedInsights (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/services/mastra.service.ts:585:9)\n' +
    '    at async <anonymous> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/routes/metrics.ts:111:22)',
  cause: AggregateError [ECONNREFUSED]: 
      at internalConnectMultiple (node:net:1122:18)
      at afterConnectMultiple (node:net:1689:7) {
    code: 'ECONNREFUSED',
    [errors]: [
      Error: connect ECONNREFUSED ::1:8081
          at createConnectionError (node:net:1652:14)
          at afterConnectMultiple (node:net:1682:16) {
        errno: -61,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 8081
      },
      Error: connect ECONNREFUSED 127.0.0.1:8081
          at createConnectionError (node:net:1652:14)
          at afterConnectMultiple (node:net:1682:16) {
        errno: -61,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 8081
      }
    ]
  },
  timestamp: '2025-09-27 18:36:49'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'Mastra API Response Error:',
  timestamp: '2025-09-27 18:36:49'
}
{
  service: 'forma-backend',
  error: {
    message: 'Route /api/auth/signup not found',
    stack: 'Error: Route /api/auth/signup not found\n' +
      '    at notFoundHandler (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/middleware/notFoundHandler.ts:5:17)\n' +
      '    at Layer.handle [as handle_request] (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/layer.js:95:5)\n' +
      '    at trim_prefix (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:328:13)\n' +
      '    at /Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:286:9\n' +
      '    at Function.process_params (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:346:12)\n' +
      '    at next (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:280:10)\n' +
      '    at /Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:646:15\n' +
      '    at next (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:265:14)\n' +
      '    at Function.handle (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:175:3)\n' +
      '    at router (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:47:12)',
    statusCode: 404
  },
  request: {
    method: 'GET',
    url: '/api/auth/signup',
    headers: {
      host: 'localhost:3001',
      'user-agent': 'curl/8.7.1',
      accept: '*/*'
    },
    body: {}
  },
  level: 'error',
  message: 'Error occurred:',
  timestamp: '2025-09-27 19:59:26'
}
{
  service: 'forma-backend',
  error: {
    message: 'Route /api/auth/signin not found',
    stack: 'Error: Route /api/auth/signin not found\n' +
      '    at notFoundHandler (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/middleware/notFoundHandler.ts:5:17)\n' +
      '    at Layer.handle [as handle_request] (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/layer.js:95:5)\n' +
      '    at trim_prefix (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:328:13)\n' +
      '    at /Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:286:9\n' +
      '    at Function.process_params (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:346:12)\n' +
      '    at next (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:280:10)\n' +
      '    at /Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:646:15\n' +
      '    at next (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:265:14)\n' +
      '    at Function.handle (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:175:3)\n' +
      '    at router (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:47:12)',
    statusCode: 404
  },
  request: {
    method: 'GET',
    url: '/api/auth/signin',
    headers: {
      host: 'localhost:3001',
      'user-agent': 'curl/8.7.1',
      accept: '*/*'
    },
    body: {}
  },
  level: 'error',
  message: 'Error occurred:',
  timestamp: '2025-09-27 19:59:26'
}
{
  service: 'forma-backend',
  error: {
    message: 'Route /api/pose/session/start not found',
    stack: 'Error: Route /api/pose/session/start not found\n' +
      '    at notFoundHandler (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/middleware/notFoundHandler.ts:5:17)\n' +
      '    at Layer.handle [as handle_request] (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/layer.js:95:5)\n' +
      '    at trim_prefix (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:328:13)\n' +
      '    at /Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:286:9\n' +
      '    at Function.process_params (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:346:12)\n' +
      '    at next (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:280:10)\n' +
      '    at /Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:646:15\n' +
      '    at next (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:265:14)\n' +
      '    at Function.handle (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:175:3)\n' +
      '    at router (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:47:12)',
    statusCode: 404
  },
  request: {
    method: 'GET',
    url: '/api/pose/session/start',
    headers: {
      host: 'localhost:3001',
      'user-agent': 'curl/8.7.1',
      accept: '*/*'
    },
    body: {}
  },
  level: 'error',
  message: 'Error occurred:',
  timestamp: '2025-09-27 19:59:26'
}
{
  service: 'forma-backend',
  error: {
    message: 'Route /api/metrics/analytics not found',
    stack: 'Error: Route /api/metrics/analytics not found\n' +
      '    at notFoundHandler (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/middleware/notFoundHandler.ts:5:17)\n' +
      '    at Layer.handle [as handle_request] (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/layer.js:95:5)\n' +
      '    at trim_prefix (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:328:13)\n' +
      '    at /Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:286:9\n' +
      '    at Function.process_params (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:346:12)\n' +
      '    at next (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:280:10)\n' +
      '    at urlencodedParser (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/body-parser@1.20.3/node_modules/body-parser/lib/types/urlencoded.js:94:7)\n' +
      '    at Layer.handle [as handle_request] (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/layer.js:95:5)\n' +
      '    at trim_prefix (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:328:13)\n' +
      '    at /Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:286:9',
    statusCode: 404
  },
  request: {
    method: 'GET',
    url: '/api/metrics/analytics',
    headers: {
      host: 'localhost:3001',
      'user-agent': 'curl/8.7.1',
      accept: '*/*'
    },
    body: {}
  },
  level: 'error',
  message: 'Error occurred:',
  timestamp: '2025-09-27 19:59:26'
}
{
  service: 'forma-backend',
  issues: [
    {
      code: 'invalid_type',
      expected: 'string',
      received: 'undefined',
      path: [ 'email' ],
      message: 'Required'
    },
    {
      code: 'invalid_type',
      expected: 'string',
      received: 'undefined',
      path: [ 'password' ],
      message: 'Required'
    },
    {
      code: 'invalid_type',
      expected: 'string',
      received: 'undefined',
      path: [ 'name' ],
      message: 'Required'
    },
    {
      expected: "'healthcare_provider' | 'patient'",
      received: 'undefined',
      code: 'invalid_type',
      path: [ 'role' ],
      message: 'Required'
    }
  ],
  addIssue: [Function (anonymous)],
  addIssues: [Function (anonymous)],
  name: 'ZodError',
  level: 'error',
  message: 'Sign up error: [\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "string",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "email"\n' +
    '    ],\n' +
    '    "message": "Required"\n' +
    '  },\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "string",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "password"\n' +
    '    ],\n' +
    '    "message": "Required"\n' +
    '  },\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "string",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "name"\n' +
    '    ],\n' +
    '    "message": "Required"\n' +
    '  },\n' +
    '  {\n' +
    `    "expected": "'healthcare_provider' | 'patient'",\n` +
    '    "received": "undefined",\n' +
    '    "code": "invalid_type",\n' +
    '    "path": [\n' +
    '      "role"\n' +
    '    ],\n' +
    '    "message": "Required"\n' +
    '  }\n' +
    ']',
  stack: 'ZodError: [\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "string",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "email"\n' +
    '    ],\n' +
    '    "message": "Required"\n' +
    '  },\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "string",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "password"\n' +
    '    ],\n' +
    '    "message": "Required"\n' +
    '  },\n' +
    '  {\n' +
    '    "code": "invalid_type",\n' +
    '    "expected": "string",\n' +
    '    "received": "undefined",\n' +
    '    "path": [\n' +
    '      "name"\n' +
    '    ],\n' +
    '    "message": "Required"\n' +
    '  },\n' +
    '  {\n' +
    `    "expected": "'healthcare_provider' | 'patient'",\n` +
    '    "received": "undefined",\n' +
    '    "code": "invalid_type",\n' +
    '    "path": [\n' +
    '      "role"\n' +
    '    ],\n' +
    '    "message": "Required"\n' +
    '  }\n' +
    ']\n' +
    '    at get error [as error] (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/types.cjs:45:31)\n' +
    '    at ZodObject.parse (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/types.cjs:120:22)\n' +
    '    at <anonymous> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/routes/auth.ts:48:40)\n' +
    '    at Layer.handle [as handle_request] (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at next (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/route.js:149:13)\n' +
    '    at Route.dispatch (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/route.js:119:3)\n' +
    '    at Layer.handle [as handle_request] (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at /Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:284:15\n' +
    '    at Function.process_params (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:280:10)',
  timestamp: '2025-09-27 19:59:33'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'CedarOS API Response Error:',
  timestamp: '2025-09-27 19:59:43'
}
{
  service: 'forma-backend',
  code: 'ECONNREFUSED',
  errors: [
    Error: connect ECONNREFUSED ::1:8080
        at createConnectionError (node:net:1652:14)
        at afterConnectMultiple (node:net:1682:16) {
      errno: -61,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '::1',
      port: 8080
    },
    Error: connect ECONNREFUSED 127.0.0.1:8080
        at createConnectionError (node:net:1652:14)
        at afterConnectMultiple (node:net:1682:16) {
      errno: -61,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 8080
    }
  ],
  message: 'Failed to create CedarOS session: Error',
  name: 'AggregateError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 10000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: 'Bearer your_cedaros_key_here',
      'User-Agent': 'axios/1.12.2',
      'Content-Length': '125',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    baseURL: 'http://localhost:8080',
    method: 'post',
    url: '/sessions',
    data: '{"userId":"user_1759017579039","exerciseType":"squat","status":"active","metadata":{},"startTime":"2025-09-27T23:59:43.900Z"}',
    allowAbsoluteUrls: true
  },
  request: <ref *2> Writable {
    _events: {
      close: undefined,
      error: [Function: handleRequestError],
      prefinish: undefined,
      finish: undefined,
      drain: undefined,
      response: [Function: handleResponse],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ],
      timeout: undefined,
      abort: undefined
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 17580812,
      [Symbol(kBufferedValue)]: null
    },
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: 'http:',
      path: '/sessions',
      method: 'POST',
      headers: [Object: null prototype] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Bearer your_cedaros_key_here',
        'User-Agent': 'axios/1.12.2',
        'Content-Length': '125',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      agents: { http: undefined, https: undefined },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: { proxy: [Function: beforeRedirect] },
      hostname: 'localhost',
      port: '8080',
      agent: undefined,
      nativeProtocols: {
        'http:': {
          _connectionListener: [Function: connectionListener],
          METHODS: [
            'ACL',        'BIND',        'CHECKOUT',
            'CONNECT',    'COPY',        'DELETE',
            'GET',        'HEAD',        'LINK',
            'LOCK',       'M-SEARCH',    'MERGE',
            'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
            'MOVE',       'NOTIFY',      'OPTIONS',
            'PATCH',      'POST',        'PROPFIND',
            'PROPPATCH',  'PURGE',       'PUT',
            'QUERY',      'REBIND',      'REPORT',
            'SEARCH',     'SOURCE',      'SUBSCRIBE',
            'TRACE',      'UNBIND',      'UNLINK',
            'UNLOCK',     'UNSUBSCRIBE'
          ],
          STATUS_CODES: {
            '100': 'Continue',
            '101': 'Switching Protocols',
            '102': 'Processing',
            '103': 'Early Hints',
            '200': 'OK',
            '201': 'Created',
            '202': 'Accepted',
            '203': 'Non-Authoritative Information',
            '204': 'No Content',
            '205': 'Reset Content',
            '206': 'Partial Content',
            '207': 'Multi-Status',
            '208': 'Already Reported',
            '226': 'IM Used',
            '300': 'Multiple Choices',
            '301': 'Moved Permanently',
            '302': 'Found',
            '303': 'See Other',
            '304': 'Not Modified',
            '305': 'Use Proxy',
            '307': 'Temporary Redirect',
            '308': 'Permanent Redirect',
            '400': 'Bad Request',
            '401': 'Unauthorized',
            '402': 'Payment Required',
            '403': 'Forbidden',
            '404': 'Not Found',
            '405': 'Method Not Allowed',
            '406': 'Not Acceptable',
            '407': 'Proxy Authentication Required',
            '408': 'Request Timeout',
            '409': 'Conflict',
            '410': 'Gone',
            '411': 'Length Required',
            '412': 'Precondition Failed',
            '413': 'Payload Too Large',
            '414': 'URI Too Long',
            '415': 'Unsupported Media Type',
            '416': 'Range Not Satisfiable',
            '417': 'Expectation Failed',
            '418': "I'm a Teapot",
            '421': 'Misdirected Request',
            '422': 'Unprocessable Entity',
            '423': 'Locked',
            '424': 'Failed Dependency',
            '425': 'Too Early',
            '426': 'Upgrade Required',
            '428': 'Precondition Required',
            '429': 'Too Many Requests',
            '431': 'Request Header Fields Too Large',
            '451': 'Unavailable For Legal Reasons',
            '500': 'Internal Server Error',
            '501': 'Not Implemented',
            '502': 'Bad Gateway',
            '503': 'Service Unavailable',
            '504': 'Gateway Timeout',
            '505': 'HTTP Version Not Supported',
            '506': 'Variant Also Negotiates',
            '507': 'Insufficient Storage',
            '508': 'Loop Detected',
            '509': 'Bandwidth Limit Exceeded',
            '510': 'Not Extended',
            '511': 'Network Authentication Required'
          },
          Agent: [Function: Agent] { defaultMaxSockets: Infinity },
          ClientRequest: [Function: ClientRequest],
          IncomingMessage: [Function: IncomingMessage],
          OutgoingMessage: [Function: OutgoingMessage],
          Server: [Function: Server],
          ServerResponse: [Function: ServerResponse],
          createServer: [Function: createServer],
          validateHeaderName: [Function: wrappedFn] {
            withoutStackTrace: [Function (anonymous)]
          },
          validateHeaderValue: [Function: wrappedFn] {
            withoutStackTrace: [Function (anonymous)]
          },
          get: [Function: get],
          request: [Function: request],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          maxHeaderSize: [Getter],
          globalAgent: [Getter/Setter]
        },
        'https:': {
          Agent: [Function: Agent],
          globalAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: true,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(shapeMode)]: false,
            [Symbol(kCapture)]: false
          },
          Server: [Function: Server],
          createServer: [Function: createServer],
          get: [Function: get],
          request: [Function: request]
        }
      },
      pathname: '/sessions'
    },
    _ended: false,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 125,
    _requestBodyBuffers: [
      {
        data: <Buffer 7b 22 75 73 65 72 49 64 22 3a 22 75 73 65 72 5f 31 37 35 39 30 31 37 35 37 39 30 33 39 22 2c 22 65 78 65 72 63 69 73 65 54 79 70 65 22 3a 22 73 71 75 ... 75 more bytes>,
        encoding: undefined
      }
    ],
    _eventsCount: 3,
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        response: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 125,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: true,
      _closed: false,
      socket: Socket {
        connecting: false,
        _hadError: true,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: {
          close: [
            [Function: onClose],
            [Function: socketCloseListener],
            [Function: bound onceWrapper] {
              listener: [Function: onClose]
            }
          ],
          error: [Function: socketErrorListener],
          prefinish: undefined,
          finish: undefined,
          drain: [Function: ondrain],
          data: undefined,
          end: [Function: onReadableStreamEnd],
          readable: undefined,
          connect: [
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: bound onceWrapper] {
              listener: [Function: connect]
            },
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            }
          ],
          free: [Function: onFree],
          timeout: [
            [Function: onTimeout],
            [Function: bound onceWrapper] {
              listener: [Function: emitRequestTimeout]
            },
            [Function (anonymous)]
          ],
          agentRemove: [Function: onRemove]
        },
        _readableState: ReadableState {
          highWaterMark: 16384,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          [Symbol(kState)]: 59777526,
          [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
              at internalConnectMultiple (node:net:1122:18)
              at afterConnectMultiple (node:net:1689:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:8080
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 8080
              },
              Error: connect ECONNREFUSED 127.0.0.1:8080
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 8080
              }
            ]
          }
        },
        _writableState: WritableState {
          highWaterMark: 16384,
          length: 411,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 411,
          bufferedIndex: 0,
          pendingcb: 1,
          [Symbol(kState)]: 118260214,
          [Symbol(kBufferedValue)]: null,
          [Symbol(kWriteCbValue)]: [Function (anonymous)],
          [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
              at internalConnectMultiple (node:net:1122:18)
              at afterConnectMultiple (node:net:1689:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:8080
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 8080
              },
              Error: connect ECONNREFUSED 127.0.0.1:8080
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 8080
              }
            ]
          }
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 8,
        _sockname: null,
        _pendingData: [
          {
            chunk: 'POST /sessions HTTP/1.1\r\n' +
              'Accept: application/json, text/plain, */*\r\n' +
              'Content-Type: application/json\r\n' +
              'Authorization: Bearer your_cedaros_key_here\r\n' +
              'User-Agent: axios/1.12.2\r\n' +
              'Content-Length: 125\r\n' +
              'Accept-Encoding: gzip, compress, deflate, br\r\n' +
              'Host: localhost:8080\r\n' +
              'Connection: keep-alive\r\n' +
              '\r\n',
            encoding: 'latin1',
            callback: [Function: nop]
          },
          {
            chunk: <Buffer 7b 22 75 73 65 72 49 64 22 3a 22 75 73 65 72 5f 31 37 35 39 30 31 37 35 37 39 30 33 39 22 2c 22 65 78 65 72 63 69 73 65 54 79 70 65 22 3a 22 73 71 75 ... 75 more bytes>,
            encoding: 'buffer',
            callback: [Function (anonymous)]
          },
          allBuffers: false
        ],
        _pendingEncoding: '',
        server: null,
        _server: null,
        timeout: 10000,
        parser: null,
        _httpMessage: [Circular *1],
        autoSelectFamilyAttemptedAddresses: [ '::1:8080', '127.0.0.1:8080' ],
        [Symbol(async_id_symbol)]: 568,
        [Symbol(kHandle)]: null,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: -1,
          _idlePrev: null,
          _idleNext: null,
          _idleStart: 53187,
          _onTimeout: null,
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: true,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 565,
          [Symbol(triggerId)]: 560
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'POST /sessions HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Bearer your_cedaros_key_here\r\n' +
        'User-Agent: axios/1.12.2\r\n' +
        'Content-Length: 125\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:8080\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] {
          keepAlive: true,
          scheduling: 'lifo',
          timeout: 5000,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'localhost:8080:': [
            Socket {
              connecting: false,
              _hadError: true,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _events: {
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener],
                  [Function: bound onceWrapper] {
                    listener: [Function: onClose]
                  }
                ],
                error: [Function: socketErrorListener],
                prefinish: undefined,
                finish: undefined,
                drain: [Function: ondrain],
                data: undefined,
                end: [Function: onReadableStreamEnd],
                readable: undefined,
                connect: [
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function: connect]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                ],
                free: [Function: onFree],
                timeout: [
                  [Function: onTimeout],
                  [Function: bound onceWrapper] {
                    listener: [Function: emitRequestTimeout]
                  },
                  [Function (anonymous)]
                ],
                agentRemove: [Function: onRemove]
              },
              _readableState: ReadableState {
                highWaterMark: 16384,
                buffer: [],
                bufferIndex: 0,
                length: 0,
                pipes: [],
                awaitDrainWriters: null,
                [Symbol(kState)]: 59777526,
                [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
                    at internalConnectMultiple (node:net:1122:18)
                    at afterConnectMultiple (node:net:1689:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:8080
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 8080
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:8080
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 8080
                    }
                  ]
                }
              },
              _writableState: WritableState {
                highWaterMark: 16384,
                length: 411,
                corked: 0,
                onwrite: [Function: bound onwrite],
                writelen: 411,
                bufferedIndex: 0,
                pendingcb: 1,
                [Symbol(kState)]: 118260214,
                [Symbol(kBufferedValue)]: null,
                [Symbol(kWriteCbValue)]: [Function (anonymous)],
                [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
                    at internalConnectMultiple (node:net:1122:18)
                    at afterConnectMultiple (node:net:1689:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:8080
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 8080
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:8080
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 8080
                    }
                  ]
                }
              },
              allowHalfOpen: false,
              _maxListeners: undefined,
              _eventsCount: 8,
              _sockname: null,
              _pendingData: [
                {
                  chunk: 'POST /sessions HTTP/1.1\r\n' +
                    'Accept: application/json, text/plain, */*\r\n' +
                    'Content-Type: application/json\r\n' +
                    'Authorization: Bearer your_cedaros_key_here\r\n' +
                    'User-Agent: axios/1.12.2\r\n' +
                    'Content-Length: 125\r\n' +
                    'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                    'Host: localhost:8080\r\n' +
                    'Connection: keep-alive\r\n' +
                    '\r\n',
                  encoding: 'latin1',
                  callback: [Function: nop]
                },
                {
                  chunk: <Buffer 7b 22 75 73 65 72 49 64 22 3a 22 75 73 65 72 5f 31 37 35 39 30 31 37 35 37 39 30 33 39 22 2c 22 65 78 65 72 63 69 73 65 54 79 70 65 22 3a 22 73 71 75 ... 75 more bytes>,
                  encoding: 'buffer',
                  callback: [Function (anonymous)]
                },
                allBuffers: false
              ],
              _pendingEncoding: '',
              server: null,
              _server: null,
              timeout: 10000,
              parser: null,
              _httpMessage: [Circular *1],
              autoSelectFamilyAttemptedAddresses: [ '::1:8080', '127.0.0.1:8080' ],
              [Symbol(async_id_symbol)]: 568,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: Timeout {
                _idleTimeout: -1,
                _idlePrev: null,
                _idleNext: null,
                _idleStart: 53187,
                _onTimeout: null,
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: true,
                [Symbol(refed)]: false,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 565,
                [Symbol(triggerId)]: 560
              },
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(shapeMode)]: true,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: true,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/sessions',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: [Function: emitRequestTimeout],
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Circular *2],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [ 'Authorization', 'Bearer your_cedaros_key_here' ],
        'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
        'content-length': [ 'Content-Length', '125' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:8080' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _currentUrl: 'http://localhost:8080/sessions',
    _timeout: null,
    [Symbol(shapeMode)]: true,
    [Symbol(kCapture)]: false
  },
  level: 'error',
  stack: 'AggregateError: Error\n' +
    '    at Function.AxiosError.from (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/AxiosError.js:96:14)\n' +
    '    at RedirectableRequest.handleRequestError (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/adapters/http.js:638:25)\n' +
    '    at RedirectableRequest.emit (node:events:536:35)\n' +
    '    at eventHandlers.<computed> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/follow-redirects@1.15.11/node_modules/follow-redirects/index.js:49:24)\n' +
    '    at ClientRequest.emit (node:events:524:28)\n' +
    '    at emitErrorEvent (node:_http_client:101:11)\n' +
    '    at Socket.socketErrorListener (node:_http_client:504:5)\n' +
    '    at Socket.emit (node:events:524:28)\n' +
    '    at emitErrorNT (node:internal/streams/destroy:169:8)\n' +
    '    at emitErrorCloseNT (node:internal/streams/destroy:128:3)\n' +
    '    at Axios.request (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/Axios.js:45:41)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async CedarOSService.createSession (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/services/cedaros.service.ts:107:24)\n' +
    '    at async <anonymous> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/routes/pose.ts:111:17)',
  cause: AggregateError [ECONNREFUSED]: 
      at internalConnectMultiple (node:net:1122:18)
      at afterConnectMultiple (node:net:1689:7) {
    code: 'ECONNREFUSED',
    [errors]: [
      Error: connect ECONNREFUSED ::1:8080
          at createConnectionError (node:net:1652:14)
          at afterConnectMultiple (node:net:1682:16) {
        errno: -61,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 8080
      },
      Error: connect ECONNREFUSED 127.0.0.1:8080
          at createConnectionError (node:net:1652:14)
          at afterConnectMultiple (node:net:1682:16) {
        errno: -61,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 8080
      }
    ]
  },
  timestamp: '2025-09-27 19:59:43'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'Mastra API Response Error:',
  timestamp: '2025-09-27 19:59:43'
}
{
  service: 'forma-backend',
  code: 'ECONNREFUSED',
  errors: [
    Error: connect ECONNREFUSED ::1:8081
        at createConnectionError (node:net:1652:14)
        at afterConnectMultiple (node:net:1682:16) {
      errno: -61,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '::1',
      port: 8081
    },
    Error: connect ECONNREFUSED 127.0.0.1:8081
        at createConnectionError (node:net:1652:14)
        at afterConnectMultiple (node:net:1682:16) {
      errno: -61,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 8081
    }
  ],
  message: 'Failed to create Mastra coaching session: Error',
  name: 'AggregateError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 15000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: 'Bearer your_mastra_secret_here',
      'User-Agent': 'axios/1.12.2',
      'Content-Length': '93',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    baseURL: 'http://localhost:8081',
    method: 'post',
    url: '/coaching/sessions',
    data: '{"userId":"user_1759017579039","exerciseType":"squat","startTime":"2025-09-27T23:59:43.937Z"}',
    allowAbsoluteUrls: true
  },
  request: <ref *2> Writable {
    _events: {
      close: undefined,
      error: [Function: handleRequestError],
      prefinish: undefined,
      finish: undefined,
      drain: undefined,
      response: [Function: handleResponse],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ],
      timeout: undefined,
      abort: undefined
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 17580812,
      [Symbol(kBufferedValue)]: null
    },
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: 'http:',
      path: '/coaching/sessions',
      method: 'POST',
      headers: [Object: null prototype] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Bearer your_mastra_secret_here',
        'User-Agent': 'axios/1.12.2',
        'Content-Length': '93',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      agents: { http: undefined, https: undefined },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: { proxy: [Function: beforeRedirect] },
      hostname: 'localhost',
      port: '8081',
      agent: undefined,
      nativeProtocols: {
        'http:': {
          _connectionListener: [Function: connectionListener],
          METHODS: [
            'ACL',        'BIND',        'CHECKOUT',
            'CONNECT',    'COPY',        'DELETE',
            'GET',        'HEAD',        'LINK',
            'LOCK',       'M-SEARCH',    'MERGE',
            'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
            'MOVE',       'NOTIFY',      'OPTIONS',
            'PATCH',      'POST',        'PROPFIND',
            'PROPPATCH',  'PURGE',       'PUT',
            'QUERY',      'REBIND',      'REPORT',
            'SEARCH',     'SOURCE',      'SUBSCRIBE',
            'TRACE',      'UNBIND',      'UNLINK',
            'UNLOCK',     'UNSUBSCRIBE'
          ],
          STATUS_CODES: {
            '100': 'Continue',
            '101': 'Switching Protocols',
            '102': 'Processing',
            '103': 'Early Hints',
            '200': 'OK',
            '201': 'Created',
            '202': 'Accepted',
            '203': 'Non-Authoritative Information',
            '204': 'No Content',
            '205': 'Reset Content',
            '206': 'Partial Content',
            '207': 'Multi-Status',
            '208': 'Already Reported',
            '226': 'IM Used',
            '300': 'Multiple Choices',
            '301': 'Moved Permanently',
            '302': 'Found',
            '303': 'See Other',
            '304': 'Not Modified',
            '305': 'Use Proxy',
            '307': 'Temporary Redirect',
            '308': 'Permanent Redirect',
            '400': 'Bad Request',
            '401': 'Unauthorized',
            '402': 'Payment Required',
            '403': 'Forbidden',
            '404': 'Not Found',
            '405': 'Method Not Allowed',
            '406': 'Not Acceptable',
            '407': 'Proxy Authentication Required',
            '408': 'Request Timeout',
            '409': 'Conflict',
            '410': 'Gone',
            '411': 'Length Required',
            '412': 'Precondition Failed',
            '413': 'Payload Too Large',
            '414': 'URI Too Long',
            '415': 'Unsupported Media Type',
            '416': 'Range Not Satisfiable',
            '417': 'Expectation Failed',
            '418': "I'm a Teapot",
            '421': 'Misdirected Request',
            '422': 'Unprocessable Entity',
            '423': 'Locked',
            '424': 'Failed Dependency',
            '425': 'Too Early',
            '426': 'Upgrade Required',
            '428': 'Precondition Required',
            '429': 'Too Many Requests',
            '431': 'Request Header Fields Too Large',
            '451': 'Unavailable For Legal Reasons',
            '500': 'Internal Server Error',
            '501': 'Not Implemented',
            '502': 'Bad Gateway',
            '503': 'Service Unavailable',
            '504': 'Gateway Timeout',
            '505': 'HTTP Version Not Supported',
            '506': 'Variant Also Negotiates',
            '507': 'Insufficient Storage',
            '508': 'Loop Detected',
            '509': 'Bandwidth Limit Exceeded',
            '510': 'Not Extended',
            '511': 'Network Authentication Required'
          },
          Agent: [Function: Agent] { defaultMaxSockets: Infinity },
          ClientRequest: [Function: ClientRequest],
          IncomingMessage: [Function: IncomingMessage],
          OutgoingMessage: [Function: OutgoingMessage],
          Server: [Function: Server],
          ServerResponse: [Function: ServerResponse],
          createServer: [Function: createServer],
          validateHeaderName: [Function: wrappedFn] {
            withoutStackTrace: [Function (anonymous)]
          },
          validateHeaderValue: [Function: wrappedFn] {
            withoutStackTrace: [Function (anonymous)]
          },
          get: [Function: get],
          request: [Function: request],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          maxHeaderSize: [Getter],
          globalAgent: [Getter/Setter]
        },
        'https:': {
          Agent: [Function: Agent],
          globalAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: true,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(shapeMode)]: false,
            [Symbol(kCapture)]: false
          },
          Server: [Function: Server],
          createServer: [Function: createServer],
          get: [Function: get],
          request: [Function: request]
        }
      },
      pathname: '/coaching/sessions'
    },
    _ended: false,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 93,
    _requestBodyBuffers: [
      {
        data: <Buffer 7b 22 75 73 65 72 49 64 22 3a 22 75 73 65 72 5f 31 37 35 39 30 31 37 35 37 39 30 33 39 22 2c 22 65 78 65 72 63 69 73 65 54 79 70 65 22 3a 22 73 71 75 ... 43 more bytes>,
        encoding: undefined
      }
    ],
    _eventsCount: 3,
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        response: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 93,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: true,
      _closed: false,
      socket: Socket {
        connecting: false,
        _hadError: true,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: {
          close: [
            [Function: onClose],
            [Function: socketCloseListener],
            [Function: bound onceWrapper] {
              listener: [Function: onClose]
            }
          ],
          error: [Function: socketErrorListener],
          prefinish: undefined,
          finish: undefined,
          drain: [Function: ondrain],
          data: undefined,
          end: [Function: onReadableStreamEnd],
          readable: undefined,
          connect: [
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: bound onceWrapper] {
              listener: [Function: connect]
            },
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            }
          ],
          free: [Function: onFree],
          timeout: [
            [Function: onTimeout],
            [Function: bound onceWrapper] {
              listener: [Function: emitRequestTimeout]
            },
            [Function (anonymous)]
          ],
          agentRemove: [Function: onRemove]
        },
        _readableState: ReadableState {
          highWaterMark: 16384,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          [Symbol(kState)]: 59777526,
          [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
              at internalConnectMultiple (node:net:1122:18)
              at afterConnectMultiple (node:net:1689:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 8081
              },
              Error: connect ECONNREFUSED 127.0.0.1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 8081
              }
            ]
          }
        },
        _writableState: WritableState {
          highWaterMark: 16384,
          length: 389,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 389,
          bufferedIndex: 0,
          pendingcb: 1,
          [Symbol(kState)]: 118260214,
          [Symbol(kBufferedValue)]: null,
          [Symbol(kWriteCbValue)]: [Function (anonymous)],
          [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
              at internalConnectMultiple (node:net:1122:18)
              at afterConnectMultiple (node:net:1689:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 8081
              },
              Error: connect ECONNREFUSED 127.0.0.1:8081
                  at createConnectionError (node:net:1652:14)
                  at afterConnectMultiple (node:net:1682:16) {
                errno: -61,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 8081
              }
            ]
          }
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 8,
        _sockname: null,
        _pendingData: [
          {
            chunk: 'POST /coaching/sessions HTTP/1.1\r\n' +
              'Accept: application/json, text/plain, */*\r\n' +
              'Content-Type: application/json\r\n' +
              'Authorization: Bearer your_mastra_secret_here\r\n' +
              'User-Agent: axios/1.12.2\r\n' +
              'Content-Length: 93\r\n' +
              'Accept-Encoding: gzip, compress, deflate, br\r\n' +
              'Host: localhost:8081\r\n' +
              'Connection: keep-alive\r\n' +
              '\r\n',
            encoding: 'latin1',
            callback: [Function: nop]
          },
          {
            chunk: <Buffer 7b 22 75 73 65 72 49 64 22 3a 22 75 73 65 72 5f 31 37 35 39 30 31 37 35 37 39 30 33 39 22 2c 22 65 78 65 72 63 69 73 65 54 79 70 65 22 3a 22 73 71 75 ... 43 more bytes>,
            encoding: 'buffer',
            callback: [Function (anonymous)]
          },
          allBuffers: false
        ],
        _pendingEncoding: '',
        server: null,
        _server: null,
        timeout: 15000,
        parser: null,
        _httpMessage: [Circular *1],
        autoSelectFamilyAttemptedAddresses: [ '::1:8081', '127.0.0.1:8081' ],
        [Symbol(async_id_symbol)]: 612,
        [Symbol(kHandle)]: null,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: -1,
          _idlePrev: null,
          _idleNext: null,
          _idleStart: 53207,
          _onTimeout: null,
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: true,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 605,
          [Symbol(triggerId)]: 594
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'POST /coaching/sessions HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Bearer your_mastra_secret_here\r\n' +
        'User-Agent: axios/1.12.2\r\n' +
        'Content-Length: 93\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:8081\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] {
          keepAlive: true,
          scheduling: 'lifo',
          timeout: 5000,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'localhost:8081:': [
            Socket {
              connecting: false,
              _hadError: true,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _events: {
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener],
                  [Function: bound onceWrapper] {
                    listener: [Function: onClose]
                  }
                ],
                error: [Function: socketErrorListener],
                prefinish: undefined,
                finish: undefined,
                drain: [Function: ondrain],
                data: undefined,
                end: [Function: onReadableStreamEnd],
                readable: undefined,
                connect: [
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function: connect]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                ],
                free: [Function: onFree],
                timeout: [
                  [Function: onTimeout],
                  [Function: bound onceWrapper] {
                    listener: [Function: emitRequestTimeout]
                  },
                  [Function (anonymous)]
                ],
                agentRemove: [Function: onRemove]
              },
              _readableState: ReadableState {
                highWaterMark: 16384,
                buffer: [],
                bufferIndex: 0,
                length: 0,
                pipes: [],
                awaitDrainWriters: null,
                [Symbol(kState)]: 59777526,
                [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
                    at internalConnectMultiple (node:net:1122:18)
                    at afterConnectMultiple (node:net:1689:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 8081
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 8081
                    }
                  ]
                }
              },
              _writableState: WritableState {
                highWaterMark: 16384,
                length: 389,
                corked: 0,
                onwrite: [Function: bound onwrite],
                writelen: 389,
                bufferedIndex: 0,
                pendingcb: 1,
                [Symbol(kState)]: 118260214,
                [Symbol(kBufferedValue)]: null,
                [Symbol(kWriteCbValue)]: [Function (anonymous)],
                [Symbol(kErroredValue)]: AggregateError [ECONNREFUSED]: 
                    at internalConnectMultiple (node:net:1122:18)
                    at afterConnectMultiple (node:net:1689:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 8081
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:8081
                        at createConnectionError (node:net:1652:14)
                        at afterConnectMultiple (node:net:1682:16) {
                      errno: -61,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 8081
                    }
                  ]
                }
              },
              allowHalfOpen: false,
              _maxListeners: undefined,
              _eventsCount: 8,
              _sockname: null,
              _pendingData: [
                {
                  chunk: 'POST /coaching/sessions HTTP/1.1\r\n' +
                    'Accept: application/json, text/plain, */*\r\n' +
                    'Content-Type: application/json\r\n' +
                    'Authorization: Bearer your_mastra_secret_here\r\n' +
                    'User-Agent: axios/1.12.2\r\n' +
                    'Content-Length: 93\r\n' +
                    'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                    'Host: localhost:8081\r\n' +
                    'Connection: keep-alive\r\n' +
                    '\r\n',
                  encoding: 'latin1',
                  callback: [Function: nop]
                },
                {
                  chunk: <Buffer 7b 22 75 73 65 72 49 64 22 3a 22 75 73 65 72 5f 31 37 35 39 30 31 37 35 37 39 30 33 39 22 2c 22 65 78 65 72 63 69 73 65 54 79 70 65 22 3a 22 73 71 75 ... 43 more bytes>,
                  encoding: 'buffer',
                  callback: [Function (anonymous)]
                },
                allBuffers: false
              ],
              _pendingEncoding: '',
              server: null,
              _server: null,
              timeout: 15000,
              parser: null,
              _httpMessage: [Circular *1],
              autoSelectFamilyAttemptedAddresses: [ '::1:8081', '127.0.0.1:8081' ],
              [Symbol(async_id_symbol)]: 612,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: Timeout {
                _idleTimeout: -1,
                _idlePrev: null,
                _idleNext: null,
                _idleStart: 53207,
                _onTimeout: null,
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: true,
                [Symbol(refed)]: false,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 605,
                [Symbol(triggerId)]: 594
              },
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(shapeMode)]: true,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: true,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/coaching/sessions',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: [Function: emitRequestTimeout],
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Circular *2],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [ 'Authorization', 'Bearer your_mastra_secret_here' ],
        'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
        'content-length': [ 'Content-Length', '93' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:8081' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _currentUrl: 'http://localhost:8081/coaching/sessions',
    _timeout: null,
    [Symbol(shapeMode)]: true,
    [Symbol(kCapture)]: false
  },
  level: 'error',
  stack: 'AggregateError: Error\n' +
    '    at Function.AxiosError.from (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/AxiosError.js:96:14)\n' +
    '    at RedirectableRequest.handleRequestError (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/adapters/http.js:638:25)\n' +
    '    at RedirectableRequest.emit (node:events:536:35)\n' +
    '    at eventHandlers.<computed> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/follow-redirects@1.15.11/node_modules/follow-redirects/index.js:49:24)\n' +
    '    at ClientRequest.emit (node:events:524:28)\n' +
    '    at emitErrorEvent (node:_http_client:101:11)\n' +
    '    at Socket.socketErrorListener (node:_http_client:504:5)\n' +
    '    at Socket.emit (node:events:524:28)\n' +
    '    at emitErrorNT (node:internal/streams/destroy:169:8)\n' +
    '    at emitErrorCloseNT (node:internal/streams/destroy:128:3)\n' +
    '    at Axios.request (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/Axios.js:45:41)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async MastraService.createCoachingSession (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/services/mastra.service.ts:148:24)\n' +
    '    at async <anonymous> (/Users/natal/Documents/Hackathon/pt-analysis-app/backend/src/routes/pose.ts:130:25)',
  cause: AggregateError [ECONNREFUSED]: 
      at internalConnectMultiple (node:net:1122:18)
      at afterConnectMultiple (node:net:1689:7) {
    code: 'ECONNREFUSED',
    [errors]: [
      Error: connect ECONNREFUSED ::1:8081
          at createConnectionError (node:net:1652:14)
          at afterConnectMultiple (node:net:1682:16) {
        errno: -61,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 8081
      },
      Error: connect ECONNREFUSED 127.0.0.1:8081
          at createConnectionError (node:net:1652:14)
          at afterConnectMultiple (node:net:1682:16) {
        errno: -61,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 8081
      }
    ]
  },
  timestamp: '2025-09-27 19:59:43'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'CedarOS API Response Error:',
  timestamp: '2025-09-28 00:20:49'
}
{
  service: 'forma-backend',
  message: 'Failed to create CedarOS session: Request failed with status code 404',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 10000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: 'Bearer your_cedaros_key_here',
      'User-Agent': 'axios/1.12.2',
      'Content-Length': '125',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    baseURL: 'http://cedaros:8080',
    method: 'post',
    url: '/sessions',
    data: '{"userId":"user_1759018843937","exerciseType":"squat","status":"active","metadata":{},"startTime":"2025-09-28T00:20:48.862Z"}',
    allowAbsoluteUrls: true
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: '125',
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *2> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'cedaros',
      _closeAfterHandlingError: false,
      _readableState: ReadableState {
        state: 266328,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [Function: onReadableStreamEnd],
        free: [Function: onFree],
        close: [ [Function: onClose], [Function: socketCloseListener] ],
        timeout: [ [Function: onTimeout], [Function: destroy] ],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular *1],
      timeout: 10000,
      [Symbol(async_id_symbol)]: 339,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        [Symbol(owner_symbol)]: [Circular *2]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 10000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 205976,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 347,
        [Symbol(triggerId)]: 342
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'POST /sessions HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json\r\n' +
      'Authorization: Bearer your_cedaros_key_here\r\n' +
      'User-Agent: axios/1.12.2\r\n' +
      'Content-Length: 125\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: cedaros:8080\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] { noDelay: true, path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'cedaros:8080:': [
          <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'cedaros',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              state: 266328,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              errored: null,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [ [Function: onTimeout], [Function: destroy] ],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *1],
            timeout: 10000,
            [Symbol(async_id_symbol)]: 339,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: Timeout {
              _idleTimeout: 10000,
              _idlePrev: [TimersList],
              _idleNext: [TimersList],
              _idleStart: 205976,
              _onTimeout: [Function: bound ],
              _timerArgs: undefined,
              _repeat: null,
              _destroyed: false,
              [Symbol(refed)]: false,
              [Symbol(kHasPrimitive)]: false,
              [Symbol(asyncId)]: 347,
              [Symbol(triggerId)]: 342
            },
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: true,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'POST',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/sessions',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        state: 456758,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        error: [Function: handleStreamError],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'cedaros',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [ [Function: onTimeout], [Function: destroy] ],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        timeout: 10000,
        [Symbol(async_id_symbol)]: 339,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 10000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 205976,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 347,
          [Symbol(triggerId)]: 342
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'X-Powered-By',
        'Express',
        'Access-Control-Allow-Origin',
        '*',
        'Content-Security-Policy',
        "default-src 'none'",
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '148',
        'Date',
        'Sun, 28 Sep 2025 00:20:49 GMT',
        'Connection',
        'close'
      ],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 404,
      statusMessage: 'Not Found',
      client: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'cedaros',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [ [Function: onTimeout], [Function: destroy] ],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        timeout: 10000,
        [Symbol(async_id_symbol)]: 339,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 10000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 205976,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 347,
          [Symbol(triggerId)]: 342
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      responseUrl: 'http://cedaros:8080/sessions',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'x-powered-by': 'Express',
        'access-control-allow-origin': '*',
        'content-security-policy': "default-src 'none'",
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '148',
        date: 'Sun, 28 Sep 2025 00:20:49 GMT',
        connection: 'close'
      },
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'cedaros',
    protocol: 'http:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/sessions',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          Authorization: 'Bearer your_cedaros_key_here',
          'User-Agent': 'axios/1.12.2',
          'Content-Length': '125',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'cedaros',
        port: '8080',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/sessions'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 125,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://cedaros:8080/sessions',
      _timeout: null,
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'content-type': [ 'Content-Type', 'application/json' ],
      authorization: [ 'Authorization', 'Bearer your_cedaros_key_here' ],
      'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
      'content-length': [ 'Content-Length', '125' ],
      'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
      host: [ 'Host', 'cedaros:8080' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 404,
    statusText: 'Not Found',
    headers: Object [AxiosHeaders] {
      'x-powered-by': 'Express',
      'access-control-allow-origin': '*',
      'content-security-policy': "default-src 'none'",
      'x-content-type-options': 'nosniff',
      'content-type': 'text/html; charset=utf-8',
      'content-length': '148',
      date: 'Sun, 28 Sep 2025 00:20:49 GMT',
      connection: 'close'
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 10000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Bearer your_cedaros_key_here',
        'User-Agent': 'axios/1.12.2',
        'Content-Length': '125',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      baseURL: 'http://cedaros:8080',
      method: 'post',
      url: '/sessions',
      data: '{"userId":"user_1759018843937","exerciseType":"squat","status":"active","metadata":{},"startTime":"2025-09-28T00:20:48.862Z"}',
      allowAbsoluteUrls: true
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '125',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'cedaros',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [ [Function: onTimeout], [Function: destroy] ],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        timeout: 10000,
        [Symbol(async_id_symbol)]: 339,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 10000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 205976,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 347,
          [Symbol(triggerId)]: 342
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'POST /sessions HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Bearer your_cedaros_key_here\r\n' +
        'User-Agent: axios/1.12.2\r\n' +
        'Content-Length: 125\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: cedaros:8080\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'cedaros:8080:': [
            <ref *2> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'cedaros',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                state: 266328,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                errored: null,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _events: [Object: null prototype] {
                end: [Function: onReadableStreamEnd],
                free: [Function: onFree],
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                timeout: [ [Function: onTimeout], [Function: destroy] ],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: null,
              _httpMessage: [Circular *1],
              timeout: 10000,
              [Symbol(async_id_symbol)]: 339,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: Timeout {
                _idleTimeout: 10000,
                _idlePrev: [TimersList],
                _idleNext: [TimersList],
                _idleStart: 205976,
                _onTimeout: [Function: bound ],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: false,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 347,
                [Symbol(triggerId)]: 342
              },
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: true,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/sessions',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          state: 456758,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'cedaros',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 266328,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [ [Function: onTimeout], [Function: destroy] ],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          timeout: 10000,
          [Symbol(async_id_symbol)]: 339,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: 10000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 205976,
            _onTimeout: [Function: bound ],
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 347,
            [Symbol(triggerId)]: 342
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'X-Powered-By',
          'Express',
          'Access-Control-Allow-Origin',
          '*',
          'Content-Security-Policy',
          "default-src 'none'",
          'X-Content-Type-Options',
          'nosniff',
          'Content-Type',
          'text/html; charset=utf-8',
          'Content-Length',
          '148',
          'Date',
          'Sun, 28 Sep 2025 00:20:49 GMT',
          'Connection',
          'close'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'cedaros',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 266328,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [ [Function: onTimeout], [Function: destroy] ],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          timeout: 10000,
          [Symbol(async_id_symbol)]: 339,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: 10000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 205976,
            _onTimeout: [Function: bound ],
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 347,
            [Symbol(triggerId)]: 342
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *1],
        responseUrl: 'http://cedaros:8080/sessions',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'x-powered-by': 'Express',
          'access-control-allow-origin': '*',
          'content-security-policy': "default-src 'none'",
          'x-content-type-options': 'nosniff',
          'content-type': 'text/html; charset=utf-8',
          'content-length': '148',
          date: 'Sun, 28 Sep 2025 00:20:49 GMT',
          connection: 'close'
        },
        [Symbol(kHeadersCount)]: 16,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'cedaros',
      protocol: 'http:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [
            [Function: handleRequestSocket],
            [Function: destroyOnTimeout]
          ]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'http:',
          path: '/sessions',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Bearer your_cedaros_key_here',
            'User-Agent': 'axios/1.12.2',
            'Content-Length': '125',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'cedaros',
          port: '8080',
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/sessions'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 125,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *1],
        _currentUrl: 'http://cedaros:8080/sessions',
        _timeout: null,
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [ 'Authorization', 'Bearer your_cedaros_key_here' ],
        'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
        'content-length': [ 'Content-Length', '125' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'cedaros:8080' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>Error</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>Cannot POST /sessions</pre>\n' +
      '</body>\n' +
      '</html>\n'
  },
  status: 404,
  level: 'error',
  stack: 'AxiosError: Request failed with status code 404\n' +
    '    at settle (/app/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/settle.js:19:12)\n' +
    '    at IncomingMessage.handleStreamEnd (/app/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/adapters/http.js:617:11)\n' +
    '    at IncomingMessage.emit (node:events:529:35)\n' +
    '    at endReadableNT (node:internal/streams/readable:1400:12)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)\n' +
    '    at Axios.request (/app/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/Axios.js:45:41)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at CedarOSService.createSession (/app/src/services/cedaros.service.ts:107:24)\n' +
    '    at <anonymous> (/app/src/routes/pose.ts:111:17)',
  timestamp: '2025-09-28 00:20:49'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'Mastra API Response Error:',
  timestamp: '2025-09-28 00:20:50'
}
{
  service: 'forma-backend',
  message: 'Failed to create Mastra coaching session: Request failed with status code 404',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 15000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: 'Bearer your_mastra_secret_here',
      'User-Agent': 'axios/1.12.2',
      'Content-Length': '93',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    baseURL: 'http://mastra:8081',
    method: 'post',
    url: '/coaching/sessions',
    data: '{"userId":"user_1759018843937","exerciseType":"squat","startTime":"2025-09-28T00:20:50.055Z"}',
    allowAbsoluteUrls: true
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: '93',
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *2> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'mastra',
      _closeAfterHandlingError: false,
      _readableState: ReadableState {
        state: 266328,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [Function: onReadableStreamEnd],
        free: [Function: onFree],
        close: [ [Function: onClose], [Function: socketCloseListener] ],
        timeout: [ [Function: onTimeout], [Function: destroy] ],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular *1],
      timeout: 15000,
      [Symbol(async_id_symbol)]: 380,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        [Symbol(owner_symbol)]: [Circular *2]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 15000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 206851,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 393,
        [Symbol(triggerId)]: 382
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'POST /coaching/sessions HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json\r\n' +
      'Authorization: Bearer your_mastra_secret_here\r\n' +
      'User-Agent: axios/1.12.2\r\n' +
      'Content-Length: 93\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: mastra:8081\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] { noDelay: true, path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'mastra:8081:': [
          <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'mastra',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              state: 266328,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              errored: null,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [ [Function: onTimeout], [Function: destroy] ],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *1],
            timeout: 15000,
            [Symbol(async_id_symbol)]: 380,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: Timeout {
              _idleTimeout: 15000,
              _idlePrev: [TimersList],
              _idleNext: [TimersList],
              _idleStart: 206851,
              _onTimeout: [Function: bound ],
              _timerArgs: undefined,
              _repeat: null,
              _destroyed: false,
              [Symbol(refed)]: false,
              [Symbol(kHasPrimitive)]: false,
              [Symbol(asyncId)]: 393,
              [Symbol(triggerId)]: 382
            },
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: true,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'POST',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/coaching/sessions',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        state: 456758,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        error: [Function: handleStreamError],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'mastra',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [ [Function: onTimeout], [Function: destroy] ],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        timeout: 15000,
        [Symbol(async_id_symbol)]: 380,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 15000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 206851,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 393,
          [Symbol(triggerId)]: 382
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'X-Powered-By',
        'Express',
        'Access-Control-Allow-Origin',
        '*',
        'Content-Security-Policy',
        "default-src 'none'",
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '157',
        'Date',
        'Sun, 28 Sep 2025 00:20:50 GMT',
        'Connection',
        'close'
      ],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 404,
      statusMessage: 'Not Found',
      client: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'mastra',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [ [Function: onTimeout], [Function: destroy] ],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        timeout: 15000,
        [Symbol(async_id_symbol)]: 380,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 15000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 206851,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 393,
          [Symbol(triggerId)]: 382
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      responseUrl: 'http://mastra:8081/coaching/sessions',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'x-powered-by': 'Express',
        'access-control-allow-origin': '*',
        'content-security-policy': "default-src 'none'",
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '157',
        date: 'Sun, 28 Sep 2025 00:20:50 GMT',
        connection: 'close'
      },
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'mastra',
    protocol: 'http:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/coaching/sessions',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          Authorization: 'Bearer your_mastra_secret_here',
          'User-Agent': 'axios/1.12.2',
          'Content-Length': '93',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'mastra',
        port: '8081',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/coaching/sessions'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 93,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://mastra:8081/coaching/sessions',
      _timeout: null,
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'content-type': [ 'Content-Type', 'application/json' ],
      authorization: [ 'Authorization', 'Bearer your_mastra_secret_here' ],
      'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
      'content-length': [ 'Content-Length', '93' ],
      'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
      host: [ 'Host', 'mastra:8081' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 404,
    statusText: 'Not Found',
    headers: Object [AxiosHeaders] {
      'x-powered-by': 'Express',
      'access-control-allow-origin': '*',
      'content-security-policy': "default-src 'none'",
      'x-content-type-options': 'nosniff',
      'content-type': 'text/html; charset=utf-8',
      'content-length': '157',
      date: 'Sun, 28 Sep 2025 00:20:50 GMT',
      connection: 'close'
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 15000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Bearer your_mastra_secret_here',
        'User-Agent': 'axios/1.12.2',
        'Content-Length': '93',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      baseURL: 'http://mastra:8081',
      method: 'post',
      url: '/coaching/sessions',
      data: '{"userId":"user_1759018843937","exerciseType":"squat","startTime":"2025-09-28T00:20:50.055Z"}',
      allowAbsoluteUrls: true
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '93',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'mastra',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [ [Function: onTimeout], [Function: destroy] ],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        timeout: 15000,
        [Symbol(async_id_symbol)]: 380,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 15000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 206851,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 393,
          [Symbol(triggerId)]: 382
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'POST /coaching/sessions HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Bearer your_mastra_secret_here\r\n' +
        'User-Agent: axios/1.12.2\r\n' +
        'Content-Length: 93\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: mastra:8081\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'mastra:8081:': [
            <ref *2> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'mastra',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                state: 266328,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                errored: null,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _events: [Object: null prototype] {
                end: [Function: onReadableStreamEnd],
                free: [Function: onFree],
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                timeout: [ [Function: onTimeout], [Function: destroy] ],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: null,
              _httpMessage: [Circular *1],
              timeout: 15000,
              [Symbol(async_id_symbol)]: 380,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: Timeout {
                _idleTimeout: 15000,
                _idlePrev: [TimersList],
                _idleNext: [TimersList],
                _idleStart: 206851,
                _onTimeout: [Function: bound ],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: false,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 393,
                [Symbol(triggerId)]: 382
              },
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: true,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/coaching/sessions',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          state: 456758,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'mastra',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 266328,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [ [Function: onTimeout], [Function: destroy] ],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          timeout: 15000,
          [Symbol(async_id_symbol)]: 380,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: 15000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 206851,
            _onTimeout: [Function: bound ],
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 393,
            [Symbol(triggerId)]: 382
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'X-Powered-By',
          'Express',
          'Access-Control-Allow-Origin',
          '*',
          'Content-Security-Policy',
          "default-src 'none'",
          'X-Content-Type-Options',
          'nosniff',
          'Content-Type',
          'text/html; charset=utf-8',
          'Content-Length',
          '157',
          'Date',
          'Sun, 28 Sep 2025 00:20:50 GMT',
          'Connection',
          'close'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'mastra',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 266328,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [ [Function: onTimeout], [Function: destroy] ],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          timeout: 15000,
          [Symbol(async_id_symbol)]: 380,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: 15000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 206851,
            _onTimeout: [Function: bound ],
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 393,
            [Symbol(triggerId)]: 382
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *1],
        responseUrl: 'http://mastra:8081/coaching/sessions',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'x-powered-by': 'Express',
          'access-control-allow-origin': '*',
          'content-security-policy': "default-src 'none'",
          'x-content-type-options': 'nosniff',
          'content-type': 'text/html; charset=utf-8',
          'content-length': '157',
          date: 'Sun, 28 Sep 2025 00:20:50 GMT',
          connection: 'close'
        },
        [Symbol(kHeadersCount)]: 16,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'mastra',
      protocol: 'http:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [
            [Function: handleRequestSocket],
            [Function: destroyOnTimeout]
          ]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'http:',
          path: '/coaching/sessions',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Bearer your_mastra_secret_here',
            'User-Agent': 'axios/1.12.2',
            'Content-Length': '93',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'mastra',
          port: '8081',
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/coaching/sessions'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 93,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *1],
        _currentUrl: 'http://mastra:8081/coaching/sessions',
        _timeout: null,
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [ 'Authorization', 'Bearer your_mastra_secret_here' ],
        'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
        'content-length': [ 'Content-Length', '93' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'mastra:8081' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>Error</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>Cannot POST /coaching/sessions</pre>\n' +
      '</body>\n' +
      '</html>\n'
  },
  status: 404,
  level: 'error',
  stack: 'AxiosError: Request failed with status code 404\n' +
    '    at settle (/app/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/settle.js:19:12)\n' +
    '    at IncomingMessage.handleStreamEnd (/app/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/adapters/http.js:617:11)\n' +
    '    at IncomingMessage.emit (node:events:529:35)\n' +
    '    at endReadableNT (node:internal/streams/readable:1400:12)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)\n' +
    '    at Axios.request (/app/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/Axios.js:45:41)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at MastraService.createCoachingSession (/app/src/services/mastra.service.ts:148:24)\n' +
    '    at <anonymous> (/app/src/routes/pose.ts:130:25)',
  timestamp: '2025-09-28 00:20:50'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'CedarOS API Response Error:',
  timestamp: '2025-09-28 00:28:41'
}
{
  service: 'forma-backend',
  message: 'Failed to create CedarOS session: Request failed with status code 404',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 10000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: 'Bearer your_cedaros_key_here',
      'User-Agent': 'axios/1.12.2',
      'Content-Length': '125',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    baseURL: 'http://cedaros:8080',
    method: 'post',
    url: '/sessions',
    data: '{"userId":"user_1759019306136","exerciseType":"squat","status":"active","metadata":{},"startTime":"2025-09-28T00:28:40.196Z"}',
    allowAbsoluteUrls: true
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: '125',
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *2> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'cedaros',
      _closeAfterHandlingError: false,
      _readableState: ReadableState {
        state: 266328,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [Function: onReadableStreamEnd],
        free: [Function: onFree],
        close: [ [Function: onClose], [Function: socketCloseListener] ],
        timeout: [ [Function: onTimeout], [Function: destroy] ],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular *1],
      timeout: 10000,
      [Symbol(async_id_symbol)]: 371,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        [Symbol(owner_symbol)]: [Circular *2]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 10000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 230087,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 379,
        [Symbol(triggerId)]: 374
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'POST /sessions HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json\r\n' +
      'Authorization: Bearer your_cedaros_key_here\r\n' +
      'User-Agent: axios/1.12.2\r\n' +
      'Content-Length: 125\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: cedaros:8080\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] { noDelay: true, path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'cedaros:8080:': [
          <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'cedaros',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              state: 266328,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              errored: null,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [ [Function: onTimeout], [Function: destroy] ],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *1],
            timeout: 10000,
            [Symbol(async_id_symbol)]: 371,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: Timeout {
              _idleTimeout: 10000,
              _idlePrev: [TimersList],
              _idleNext: [TimersList],
              _idleStart: 230087,
              _onTimeout: [Function: bound ],
              _timerArgs: undefined,
              _repeat: null,
              _destroyed: false,
              [Symbol(refed)]: false,
              [Symbol(kHasPrimitive)]: false,
              [Symbol(asyncId)]: 379,
              [Symbol(triggerId)]: 374
            },
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: true,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'POST',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/sessions',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        state: 456758,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        error: [Function: handleStreamError],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'cedaros',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [ [Function: onTimeout], [Function: destroy] ],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        timeout: 10000,
        [Symbol(async_id_symbol)]: 371,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 10000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 230087,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 379,
          [Symbol(triggerId)]: 374
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'X-Powered-By',
        'Express',
        'Access-Control-Allow-Origin',
        '*',
        'Content-Security-Policy',
        "default-src 'none'",
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '148',
        'Date',
        'Sun, 28 Sep 2025 00:28:41 GMT',
        'Connection',
        'close'
      ],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 404,
      statusMessage: 'Not Found',
      client: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'cedaros',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [ [Function: onTimeout], [Function: destroy] ],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        timeout: 10000,
        [Symbol(async_id_symbol)]: 371,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 10000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 230087,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 379,
          [Symbol(triggerId)]: 374
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      responseUrl: 'http://cedaros:8080/sessions',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'x-powered-by': 'Express',
        'access-control-allow-origin': '*',
        'content-security-policy': "default-src 'none'",
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '148',
        date: 'Sun, 28 Sep 2025 00:28:41 GMT',
        connection: 'close'
      },
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'cedaros',
    protocol: 'http:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/sessions',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          Authorization: 'Bearer your_cedaros_key_here',
          'User-Agent': 'axios/1.12.2',
          'Content-Length': '125',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'cedaros',
        port: '8080',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/sessions'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 125,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://cedaros:8080/sessions',
      _timeout: null,
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'content-type': [ 'Content-Type', 'application/json' ],
      authorization: [ 'Authorization', 'Bearer your_cedaros_key_here' ],
      'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
      'content-length': [ 'Content-Length', '125' ],
      'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
      host: [ 'Host', 'cedaros:8080' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 404,
    statusText: 'Not Found',
    headers: Object [AxiosHeaders] {
      'x-powered-by': 'Express',
      'access-control-allow-origin': '*',
      'content-security-policy': "default-src 'none'",
      'x-content-type-options': 'nosniff',
      'content-type': 'text/html; charset=utf-8',
      'content-length': '148',
      date: 'Sun, 28 Sep 2025 00:28:41 GMT',
      connection: 'close'
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 10000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Bearer your_cedaros_key_here',
        'User-Agent': 'axios/1.12.2',
        'Content-Length': '125',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      baseURL: 'http://cedaros:8080',
      method: 'post',
      url: '/sessions',
      data: '{"userId":"user_1759019306136","exerciseType":"squat","status":"active","metadata":{},"startTime":"2025-09-28T00:28:40.196Z"}',
      allowAbsoluteUrls: true
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '125',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'cedaros',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [ [Function: onTimeout], [Function: destroy] ],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        timeout: 10000,
        [Symbol(async_id_symbol)]: 371,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 10000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 230087,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 379,
          [Symbol(triggerId)]: 374
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'POST /sessions HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Bearer your_cedaros_key_here\r\n' +
        'User-Agent: axios/1.12.2\r\n' +
        'Content-Length: 125\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: cedaros:8080\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'cedaros:8080:': [
            <ref *2> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'cedaros',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                state: 266328,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                errored: null,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _events: [Object: null prototype] {
                end: [Function: onReadableStreamEnd],
                free: [Function: onFree],
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                timeout: [ [Function: onTimeout], [Function: destroy] ],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: null,
              _httpMessage: [Circular *1],
              timeout: 10000,
              [Symbol(async_id_symbol)]: 371,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: Timeout {
                _idleTimeout: 10000,
                _idlePrev: [TimersList],
                _idleNext: [TimersList],
                _idleStart: 230087,
                _onTimeout: [Function: bound ],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: false,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 379,
                [Symbol(triggerId)]: 374
              },
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: true,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/sessions',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          state: 456758,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'cedaros',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 266328,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [ [Function: onTimeout], [Function: destroy] ],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          timeout: 10000,
          [Symbol(async_id_symbol)]: 371,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: 10000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 230087,
            _onTimeout: [Function: bound ],
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 379,
            [Symbol(triggerId)]: 374
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'X-Powered-By',
          'Express',
          'Access-Control-Allow-Origin',
          '*',
          'Content-Security-Policy',
          "default-src 'none'",
          'X-Content-Type-Options',
          'nosniff',
          'Content-Type',
          'text/html; charset=utf-8',
          'Content-Length',
          '148',
          'Date',
          'Sun, 28 Sep 2025 00:28:41 GMT',
          'Connection',
          'close'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'cedaros',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 266328,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [ [Function: onTimeout], [Function: destroy] ],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          timeout: 10000,
          [Symbol(async_id_symbol)]: 371,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: 10000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 230087,
            _onTimeout: [Function: bound ],
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 379,
            [Symbol(triggerId)]: 374
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *1],
        responseUrl: 'http://cedaros:8080/sessions',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'x-powered-by': 'Express',
          'access-control-allow-origin': '*',
          'content-security-policy': "default-src 'none'",
          'x-content-type-options': 'nosniff',
          'content-type': 'text/html; charset=utf-8',
          'content-length': '148',
          date: 'Sun, 28 Sep 2025 00:28:41 GMT',
          connection: 'close'
        },
        [Symbol(kHeadersCount)]: 16,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'cedaros',
      protocol: 'http:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [
            [Function: handleRequestSocket],
            [Function: destroyOnTimeout]
          ]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'http:',
          path: '/sessions',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Bearer your_cedaros_key_here',
            'User-Agent': 'axios/1.12.2',
            'Content-Length': '125',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'cedaros',
          port: '8080',
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/sessions'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 125,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *1],
        _currentUrl: 'http://cedaros:8080/sessions',
        _timeout: null,
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [ 'Authorization', 'Bearer your_cedaros_key_here' ],
        'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
        'content-length': [ 'Content-Length', '125' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'cedaros:8080' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>Error</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>Cannot POST /sessions</pre>\n' +
      '</body>\n' +
      '</html>\n'
  },
  status: 404,
  level: 'error',
  stack: 'AxiosError: Request failed with status code 404\n' +
    '    at settle (/app/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/settle.js:19:12)\n' +
    '    at IncomingMessage.handleStreamEnd (/app/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/adapters/http.js:617:11)\n' +
    '    at IncomingMessage.emit (node:events:529:35)\n' +
    '    at endReadableNT (node:internal/streams/readable:1400:12)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)\n' +
    '    at Axios.request (/app/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/Axios.js:45:41)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at CedarOSService.createSession (/app/src/services/cedaros.service.ts:107:24)\n' +
    '    at <anonymous> (/app/src/routes/pose.ts:111:17)',
  timestamp: '2025-09-28 00:28:41'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'Mastra API Response Error:',
  timestamp: '2025-09-28 00:28:41'
}
{
  service: 'forma-backend',
  message: 'Failed to create Mastra coaching session: Request failed with status code 404',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 15000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: 'Bearer your_mastra_secret_here',
      'User-Agent': 'axios/1.12.2',
      'Content-Length': '93',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    baseURL: 'http://mastra:8081',
    method: 'post',
    url: '/coaching/sessions',
    data: '{"userId":"user_1759019306136","exerciseType":"squat","startTime":"2025-09-28T00:28:41.596Z"}',
    allowAbsoluteUrls: true
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: '93',
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *2> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'mastra',
      _closeAfterHandlingError: false,
      _readableState: ReadableState {
        state: 266328,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [Function: onReadableStreamEnd],
        free: [Function: onFree],
        close: [ [Function: onClose], [Function: socketCloseListener] ],
        timeout: [ [Function: onTimeout], [Function: destroy] ],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular *1],
      timeout: 15000,
      [Symbol(async_id_symbol)]: 412,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        [Symbol(owner_symbol)]: [Circular *2]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 15000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 230593,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 425,
        [Symbol(triggerId)]: 414
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'POST /coaching/sessions HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json\r\n' +
      'Authorization: Bearer your_mastra_secret_here\r\n' +
      'User-Agent: axios/1.12.2\r\n' +
      'Content-Length: 93\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: mastra:8081\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] { noDelay: true, path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'mastra:8081:': [
          <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'mastra',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              state: 266328,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              errored: null,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [Function: onReadableStreamEnd],
              free: [Function: onFree],
              close: [ [Function: onClose], [Function: socketCloseListener] ],
              timeout: [ [Function: onTimeout], [Function: destroy] ],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 7,
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            parser: null,
            _httpMessage: [Circular *1],
            timeout: 15000,
            [Symbol(async_id_symbol)]: 412,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: Timeout {
              _idleTimeout: 15000,
              _idlePrev: [TimersList],
              _idleNext: [TimersList],
              _idleStart: 230593,
              _onTimeout: [Function: bound ],
              _timerArgs: undefined,
              _repeat: null,
              _destroyed: false,
              [Symbol(refed)]: false,
              [Symbol(kHasPrimitive)]: false,
              [Symbol(asyncId)]: 425,
              [Symbol(triggerId)]: 414
            },
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: true,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'POST',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/coaching/sessions',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        state: 456758,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        error: [Function: handleStreamError],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'mastra',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [ [Function: onTimeout], [Function: destroy] ],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        timeout: 15000,
        [Symbol(async_id_symbol)]: 412,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 15000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 230593,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 425,
          [Symbol(triggerId)]: 414
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'X-Powered-By',
        'Express',
        'Access-Control-Allow-Origin',
        '*',
        'Content-Security-Policy',
        "default-src 'none'",
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '157',
        'Date',
        'Sun, 28 Sep 2025 00:28:41 GMT',
        'Connection',
        'close'
      ],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 404,
      statusMessage: 'Not Found',
      client: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'mastra',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [ [Function: onTimeout], [Function: destroy] ],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        timeout: 15000,
        [Symbol(async_id_symbol)]: 412,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 15000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 230593,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 425,
          [Symbol(triggerId)]: 414
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      responseUrl: 'http://mastra:8081/coaching/sessions',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'x-powered-by': 'Express',
        'access-control-allow-origin': '*',
        'content-security-policy': "default-src 'none'",
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '157',
        date: 'Sun, 28 Sep 2025 00:28:41 GMT',
        connection: 'close'
      },
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'mastra',
    protocol: 'http:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/coaching/sessions',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          Authorization: 'Bearer your_mastra_secret_here',
          'User-Agent': 'axios/1.12.2',
          'Content-Length': '93',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'mastra',
        port: '8081',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/coaching/sessions'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 93,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://mastra:8081/coaching/sessions',
      _timeout: null,
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'content-type': [ 'Content-Type', 'application/json' ],
      authorization: [ 'Authorization', 'Bearer your_mastra_secret_here' ],
      'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
      'content-length': [ 'Content-Length', '93' ],
      'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
      host: [ 'Host', 'mastra:8081' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 404,
    statusText: 'Not Found',
    headers: Object [AxiosHeaders] {
      'x-powered-by': 'Express',
      'access-control-allow-origin': '*',
      'content-security-policy': "default-src 'none'",
      'x-content-type-options': 'nosniff',
      'content-type': 'text/html; charset=utf-8',
      'content-length': '157',
      date: 'Sun, 28 Sep 2025 00:28:41 GMT',
      connection: 'close'
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 15000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Bearer your_mastra_secret_here',
        'User-Agent': 'axios/1.12.2',
        'Content-Length': '93',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      baseURL: 'http://mastra:8081',
      method: 'post',
      url: '/coaching/sessions',
      data: '{"userId":"user_1759019306136","exerciseType":"squat","startTime":"2025-09-28T00:28:41.596Z"}',
      allowAbsoluteUrls: true
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '93',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'mastra',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [Function: onReadableStreamEnd],
          free: [Function: onFree],
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          timeout: [ [Function: onTimeout], [Function: destroy] ],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular *1],
        timeout: 15000,
        [Symbol(async_id_symbol)]: 412,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 15000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 230593,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 425,
          [Symbol(triggerId)]: 414
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _header: 'POST /coaching/sessions HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Bearer your_mastra_secret_here\r\n' +
        'User-Agent: axios/1.12.2\r\n' +
        'Content-Length: 93\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: mastra:8081\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'mastra:8081:': [
            <ref *2> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'mastra',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                state: 266328,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                errored: null,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _events: [Object: null prototype] {
                end: [Function: onReadableStreamEnd],
                free: [Function: onFree],
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                timeout: [ [Function: onTimeout], [Function: destroy] ],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              parser: null,
              _httpMessage: [Circular *1],
              timeout: 15000,
              [Symbol(async_id_symbol)]: 412,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: Timeout {
                _idleTimeout: 15000,
                _idlePrev: [TimersList],
                _idleNext: [TimersList],
                _idleStart: 230593,
                _onTimeout: [Function: bound ],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: false,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 425,
                [Symbol(triggerId)]: 414
              },
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: true,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/coaching/sessions',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          state: 456758,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'mastra',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 266328,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [ [Function: onTimeout], [Function: destroy] ],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          timeout: 15000,
          [Symbol(async_id_symbol)]: 412,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: 15000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 230593,
            _onTimeout: [Function: bound ],
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 425,
            [Symbol(triggerId)]: 414
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'X-Powered-By',
          'Express',
          'Access-Control-Allow-Origin',
          '*',
          'Content-Security-Policy',
          "default-src 'none'",
          'X-Content-Type-Options',
          'nosniff',
          'Content-Type',
          'text/html; charset=utf-8',
          'Content-Length',
          '157',
          'Date',
          'Sun, 28 Sep 2025 00:28:41 GMT',
          'Connection',
          'close'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'mastra',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 266328,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [Function: onReadableStreamEnd],
            free: [Function: onFree],
            close: [ [Function: onClose], [Function: socketCloseListener] ],
            timeout: [ [Function: onTimeout], [Function: destroy] ],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          parser: null,
          _httpMessage: [Circular *1],
          timeout: 15000,
          [Symbol(async_id_symbol)]: 412,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: 15000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 230593,
            _onTimeout: [Function: bound ],
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 425,
            [Symbol(triggerId)]: 414
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *1],
        responseUrl: 'http://mastra:8081/coaching/sessions',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'x-powered-by': 'Express',
          'access-control-allow-origin': '*',
          'content-security-policy': "default-src 'none'",
          'x-content-type-options': 'nosniff',
          'content-type': 'text/html; charset=utf-8',
          'content-length': '157',
          date: 'Sun, 28 Sep 2025 00:28:41 GMT',
          connection: 'close'
        },
        [Symbol(kHeadersCount)]: 16,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'mastra',
      protocol: 'http:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [
            [Function: handleRequestSocket],
            [Function: destroyOnTimeout]
          ]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'http:',
          path: '/coaching/sessions',
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            Authorization: 'Bearer your_mastra_secret_here',
            'User-Agent': 'axios/1.12.2',
            'Content-Length': '93',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'mastra',
          port: '8081',
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/coaching/sessions'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 93,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *1],
        _currentUrl: 'http://mastra:8081/coaching/sessions',
        _timeout: null,
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        authorization: [ 'Authorization', 'Bearer your_mastra_secret_here' ],
        'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
        'content-length': [ 'Content-Length', '93' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'mastra:8081' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>Error</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>Cannot POST /coaching/sessions</pre>\n' +
      '</body>\n' +
      '</html>\n'
  },
  status: 404,
  level: 'error',
  stack: 'AxiosError: Request failed with status code 404\n' +
    '    at settle (/app/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/settle.js:19:12)\n' +
    '    at IncomingMessage.handleStreamEnd (/app/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/adapters/http.js:617:11)\n' +
    '    at IncomingMessage.emit (node:events:529:35)\n' +
    '    at endReadableNT (node:internal/streams/readable:1400:12)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)\n' +
    '    at Axios.request (/app/node_modules/.pnpm/axios@1.12.2/node_modules/axios/lib/core/Axios.js:45:41)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at MastraService.createCoachingSession (/app/src/services/mastra.service.ts:148:24)\n' +
    '    at <anonymous> (/app/src/routes/pose.ts:130:25)',
  timestamp: '2025-09-28 00:28:41'
}
{
  service: 'forma-backend',
  issues: [
    {
      validation: 'email',
      code: 'invalid_string',
      message: 'Invalid email',
      path: [ 'email' ]
    }
  ],
  addIssue: [Function (anonymous)],
  addIssues: [Function (anonymous)],
  name: 'ZodError',
  level: 'error',
  message: 'Sign in error: [\n' +
    '  {\n' +
    '    "validation": "email",\n' +
    '    "code": "invalid_string",\n' +
    '    "message": "Invalid email",\n' +
    '    "path": [\n' +
    '      "email"\n' +
    '    ]\n' +
    '  }\n' +
    ']',
  stack: 'ZodError: [\n' +
    '  {\n' +
    '    "validation": "email",\n' +
    '    "code": "invalid_string",\n' +
    '    "message": "Invalid email",\n' +
    '    "path": [\n' +
    '      "email"\n' +
    '    ]\n' +
    '  }\n' +
    ']\n' +
    '    at get error [as error] (/app/node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/types.cjs:45:31)\n' +
    '    at ZodObject.parse (/app/node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/types.cjs:120:22)\n' +
    '    at <anonymous> (/app/src/routes/auth.ts:115:40)\n' +
    '    at Layer.handle [as handle_request] (/app/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at next (/app/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/route.js:149:13)\n' +
    '    at Route.dispatch (/app/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/route.js:119:3)\n' +
    '    at Layer.handle [as handle_request] (/app/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at /app/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:284:15\n' +
    '    at Function.process_params (/app/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/app/node_modules/.pnpm/express@4.21.2/node_modules/express/lib/router/index.js:280:10)',
  timestamp: '2025-09-28 00:43:21'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'GPT chat error:',
  timestamp: '2025-09-28 04:55:59'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'GPT chat error:',
  timestamp: '2025-09-28 04:57:06'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'GPT chat error:',
  timestamp: '2025-09-28 05:06:14'
}
{
  service: 'forma-backend',
  level: 'error',
  message: 'GPT chat error:',
  timestamp: '2025-09-28 05:06:25'
}
